@! $RCSfile: SegmentC2.fw,v $
@! $Revision: 1.5 $
@! $Date: 1996/06/07 15:56:39 $



@C@<Class CGAL_SegmentC2<FT>@>

@$@<class CGAL_SegmentC2<FT>@>==@{@-
template < class FT >
class CGAL_SegmentC2 : public CGAL_Handle
{
public:
                       CGAL_SegmentC2();
                       CGAL_SegmentC2(const CGAL_SegmentC2<FT>  &s);
                       CGAL_SegmentC2(const CGAL_PointC2<FT> &sp,
                                      const CGAL_PointC2<FT> &ep);

                       ~CGAL_SegmentC2();

  CGAL_SegmentC2<FT>   &operator=(const CGAL_SegmentC2<FT> &s);

  bool                 is_horizontal() const;
  bool                 is_vertical() const;
  bool                 has_on(const CGAL_PointC2<FT> &p) const;
  bool                 collinear_has_on(const CGAL_PointC2<FT> &p) const;

  bool                 operator==(const CGAL_SegmentC2<FT> &s) const;
  bool                 operator!=(const CGAL_SegmentC2<FT> &s) const;
  int                  id() const;

  CGAL_PointC2<FT>     start() const;
  CGAL_PointC2<FT>     end() const;

  CGAL_PointC2<FT>     source() const;
  CGAL_PointC2<FT>     target() const;

  CGAL_PointC2<FT>     min() const;
  CGAL_PointC2<FT>     max() const;
  CGAL_PointC2<FT>     vertex(int i) const;
  CGAL_PointC2<FT>     point(int i) const;
  CGAL_PointC2<FT>     operator[](int i) const;

  FT                   squared_length() const;

  CGAL_DirectionC2<FT> direction() const;
  CGAL_LineC2<FT>      supporting_line() const;
  CGAL_SegmentC2<FT>   opposite() const;
  CGAL_SegmentC2<FT>   transform(const CGAL_Aff_transformationC2<FT> &t) const;

  bool                 is_degenerate() const;
  CGAL_Bbox_2          bbox() const;

private:
  CGAL__Twotuple< CGAL_PointC2<FT> >*   ptr() const
  {
  return (CGAL__Twotuple< CGAL_PointC2<FT> >*)PTR;
  }
};
@}

@D@<Constructors and Destructors@>

@$@<code templates of CGAL_SegmentC2<FT>@>+=@{@-
template < class FT >
CGAL_SegmentC2<FT>::CGAL_SegmentC2()
{
  PTR = new CGAL__Twotuple< CGAL_PointC2<FT> >;
}

template < class FT >
CGAL_SegmentC2<FT>::CGAL_SegmentC2(const CGAL_SegmentC2<FT>  &s) :
  CGAL_Handle((CGAL_Handle&)s)
{}

template < class FT >
CGAL_SegmentC2<FT>::CGAL_SegmentC2(const CGAL_PointC2<FT> &sp,
                                 const CGAL_PointC2<FT> &ep)
{
  PTR = new CGAL__Twotuple< CGAL_PointC2<FT> >(sp, ep);

  CGAL_nondegeneracy_assertion;
}

template < class FT >
CGAL_SegmentC2<FT>::~CGAL_SegmentC2()
{}

#ifdef  CGAL_TO_DOUBLE
template < class FT >
CGAL_SegmentC2<FT>::operator CGAL_SegmentC2<double>() const
{
  return CGAL_SegmentC2<double>(source(), target());
}
#endif // CGAL_TO_DOUBLE

template < class FT >
CGAL_SegmentC2<FT> &CGAL_SegmentC2<FT>::operator=(const CGAL_SegmentC2<FT> &s)
{
  CGAL_Handle::operator=(s);
  return *this;
}
@}

@D@<Equalness and Identity@>

@$@<code templates of CGAL_SegmentC2<FT>@>+=@{@-
template < class FT >
bool  CGAL_SegmentC2<FT>::operator==(const CGAL_SegmentC2<FT> &s) const
{
  return ( (source() == s.source())  && (target() == s.target()) );
}

template < class FT >
bool  CGAL_SegmentC2<FT>::operator!=(const CGAL_SegmentC2<FT> &s) const
{
  return !(*this == s);
}

template < class FT >
int CGAL_SegmentC2<FT>::id() const
{
  return (int) PTR ;
}
@}

@D@<Access Functions@>

@$@<code templates of CGAL_SegmentC2<FT>@>+=@{@-
template < class FT >
CGAL_PointC2<FT>  CGAL_SegmentC2<FT>::start() const
{
  return ptr()->e0;
}

template < class FT >
CGAL_PointC2<FT>  CGAL_SegmentC2<FT>::end() const
{
  return ptr()->e1;
}


template < class FT >
CGAL_PointC2<FT>  CGAL_SegmentC2<FT>::source() const
{
  return ptr()->e0;
}

template < class FT >
CGAL_PointC2<FT>  CGAL_SegmentC2<FT>::target() const
{
  return ptr()->e1;
}


template < class FT >
CGAL_PointC2<FT>  CGAL_SegmentC2<FT>::min() const
{


  return (CGAL_lexicographically_xy_smaller(source(),target())) ? source()
                                                                : target();
}

template < class FT >
CGAL_PointC2<FT>  CGAL_SegmentC2<FT>::max() const
{


  return (CGAL_lexicographically_xy_smaller(source(),target())) ? target()
                                                                : source();
}

template < class FT >
CGAL_PointC2<FT> CGAL_SegmentC2<FT>::vertex(int i) const
{

  if(i%2 == 0) {
  return source();
  }
  return target();
}

template < class FT >
CGAL_PointC2<FT> CGAL_SegmentC2<FT>::point(int i) const
{

  if(i%2 == 0) {
  return source();
  }
  return target();
}

template < class FT >
CGAL_PointC2<FT> CGAL_SegmentC2<FT>::operator[](int i) const
{

  return vertex(i);
}
@}


@D@<Miscellaneous@>

@$@<code templates of CGAL_SegmentC2<FT>@>+=@{@-
template < class FT >
FT CGAL_SegmentC2<FT>::squared_length() const
{

  return  ( (target() - source()) * (target() - source()));
}

template < class FT >
CGAL_DirectionC2<FT> CGAL_SegmentC2<FT>::direction() const
{

  return CGAL_DirectionC2<FT>( target() - source() );
}

template < class FT >
CGAL_LineC2<FT> CGAL_SegmentC2<FT>::supporting_line() const
{

  return CGAL_LineC2<FT>(*this);
}

template < class FT >
CGAL_SegmentC2<FT> CGAL_SegmentC2<FT>::opposite() const
{

  return CGAL_SegmentC2<FT>(target(), source());
}

template < class FT >
CGAL_SegmentC2<FT> CGAL_SegmentC2<FT>::transform(
                               const CGAL_Aff_transformationC2<FT> &t) const
{
  return CGAL_SegmentC2<FT>(t.transform(source()),
                           t.transform(target()));
}

template < class FT >
CGAL_Bbox_2 CGAL_SegmentC2<FT>::bbox() const
{

  return source().bbox() + target().bbox();
}

template < class FT >
bool  CGAL_SegmentC2<FT>::is_degenerate() const
{

  return (source() == target());
}

@}


@D@<Tests@>

Sometimes we know that a point and a segment are collinear.
See for example the intersection algorithms.

{\bf Q:} The alternative was to give the function @{has_on(..)@}
an additional parameter to switch the collinearity test off.
With the extra function we save this test.

{\bf Q:} Should this function be declared private or public without
mentioning it in the specification?

@$@<code templates of CGAL_SegmentC2<FT>@>+=@{@-
template < class FT >
bool CGAL_SegmentC2<FT>::is_horizontal() const
{

  return (source().y() == target().y());
}

template < class FT >
bool CGAL_SegmentC2<FT>::is_vertical() const
{

  return (source().x() == target().x());
}

template < class FT >
bool CGAL_SegmentC2<FT>::has_on(const CGAL_PointC2<FT> &p) const
{
  return(( p == source() )
         || ( p == target() )
         || ( CGAL_collinear(source(), p, target())
              &&( CGAL_DirectionC2<FT>(p - source())
                  !=
                  CGAL_DirectionC2<FT> (p - target()))
             )
         );
}


template < class FT >
bool CGAL_SegmentC2<FT>::collinear_has_on(const CGAL_PointC2<FT> &p)
const
{
    CGAL_exactness_precondition( CGAL_collinear(source(), p, target()) );
    if (CGAL_abs(target().x()-source().x())
        > CGAL_abs(target().y()-source().y())) {
        if (p.x() < source().x())
            return (p.x() >= target().x());
        if (p.x() <= target().x())
            return true;
        return (p.x() == source().x());
    } else {
        if (p.y() < source().y())
            return (p.y() >= target().y());
        if (p.y() <= target().y())
            return true;
        return (p.y() == source().y());
    }
}
@}




@D@<Header File@>

@O@<../include/CGAL/SegmentC2.h@>==@{@-
@<CGAL notice@>
// Source: SegmentC2.h
// Author: Andreas.Fabri@@sophia.inria.fr

#ifndef CGAL_SEGMENTC2_H
#define CGAL_SEGMENTC2_H

#include <CGAL/LineC2.h>

@<class CGAL_SegmentC2<FT>@>

@<code templates of CGAL_SegmentC2<FT>@>

#endif
@}

@! $Log: SegmentC2.fw,v $
@! Revision 1.5  1996/06/07 15:56:39  fabri
@! *** empty log message ***
@!
@! Revision 1.4  1996/03/13 15:32:23  fabri
@! *** empty log message ***
@!
@! Revision 1.3  1995/11/06 17:39:50  fabri
@! compiles with GNU g++
@!
@! Revision 1.2  1995/10/19 18:01:10  fabri
@! *** empty log message ***
@!
@! Revision 1.1  1995/09/18 13:22:38  fabri
@! Initial revision
@!
@! Revision 1.2  1995/08/21 14:29:16  fabri
@! *** empty log message ***
@!
@! Revision 1.1  1995/08/16 11:56:08  fabri
@! Initial revision
@!
