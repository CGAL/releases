
@! $RCSfile: Cartesian.fw,v $
@! $Revision: 1.1 $
@! $Date: 1996/08/28 11:54:24 $

@! Author: Andreas.Fabri@@sophia.inria.fr


@B@<Cartesian Classes@>

The following header file is included by all header files defining
classes of geometric objects. Note that it is often enough to know
about the existence of a class without knowing its interface.


@O@<../include/CGAL/cartesian_classes.h@>==@{@-
// Source: cartesian_classes.h
// Author: Andreas.Fabri@@sophia.inria.fr

#ifndef CGAL_CARTESIAN_CLASSES_H
#define CGAL_CARTESIAN_CLASSES_H


#include <CGAL/basic_classes.h>

template < class FT >
class CGAL_PointC2;

template < class FT >
class CGAL_VectorC2;

template < class FT >
class CGAL_DirectionC2;

template < class FT >
class CGAL_LineC2;

template < class FT >
class CGAL_RayC2;

template < class FT >
class CGAL_SegmentC2;

template < class FT >
class CGAL_TriangleC2;

template < class FT >
class CGAL_CircleC2;

template < class FT >
class CGAL_ParabolaC2;

template < class FT >
class CGAL_Parabola_arcC2;

template < class FT >
class CGAL_PolygonC2;

template < class FT >
class CGAL_Iso_rectangleC2;

template < class FT >
class CGAL_Iso_rectangleC3;

template < class FT >
class CGAL_Aff_transformation_baseC2;

template < class R >
class CGAL_Aff_transformation_base_2;

template < class FT >
class CGAL_Aff_transformationC2;

template < class FT >
class CGAL_PlaneC3;

template < class FT >
class CGAL_PointC3;

template < class FT >
class CGAL_VectorC3;

template < class FT >
class CGAL_DirectionC3;

template < class FT >
class CGAL_LineC3;

template < class FT >
class CGAL_RayC3;

template < class FT >
class CGAL_SegmentC3;

template < class FT >
class CGAL_TriangleC3;

template < class FT >
class CGAL_TetrahedronC3;

template < class FT >
class CGAL_Aff_transformationC3;

class dint;  // integers in the range of [..] stored in a double

#endif CGAL_CARTESIAN_CLASSES_H
@}


@C@<A representation class for cartesian classes@>

A representation class links the interface to a specific
implementation. It contains nothing but typedefs.

@O@<../include/CGAL/cartesian_rep.h@>==@{@-
// Source: cartesian_rep.h
// Author: Andreas.Fabri@@sophia.inria.fr

#ifndef CGAL_CARTESIAN_REP_H
#define CGAL_CARTESIAN_REP_H

template<class ft>
class CGAL_Cartesian
{
public:
    typedef ft           FT;
    typedef ft           RT;
    typedef CGAL_PointC2<FT>  Point_2;
    typedef CGAL_VectorC2<FT> Vector_2;
    typedef CGAL_DirectionC2<FT>  Direction_2;

    typedef CGAL_SegmentC2<FT>  Segment_2;
    typedef CGAL_LineC2<FT>  Line_2;
    typedef CGAL_RayC2<FT>  Ray_2;
    typedef CGAL_TriangleC2<FT>  Triangle_2;
    typedef CGAL_CircleC2<FT>  Circle_2;
    typedef CGAL_ParabolaC2<FT>  Parabola_2;
    typedef CGAL_Parabola_arcC2<FT>  Parabola_arc_2;

    typedef CGAL_Iso_rectangleC2<FT>  Iso_rectangle_2;

    typedef CGAL_PolygonC2<FT> Polygon_2;
    typedef CGAL_Aff_transformationC2<FT>  Aff_transformation_2;

    typedef CGAL_PointC3<FT>  Point_3;
    typedef CGAL_VectorC3<FT> Vector_3;
    typedef CGAL_DirectionC3<FT>  Direction_3;

    typedef CGAL_SegmentC3<FT>  Segment_3;
    typedef CGAL_LineC3<FT>  Line_3;
    typedef CGAL_RayC3<FT>  Ray_3;
    typedef CGAL_TriangleC3<FT>  Triangle_3;

    typedef CGAL_Iso_rectangleC3<FT>  Iso_rectangle_3;

    typedef CGAL_Aff_transformationC3<FT>  Aff_transformation_3;

    typedef CGAL_PlaneC3<FT> Plane_3;
    typedef CGAL_TetrahedronC3<FT> Tetrahedron_3;

#ifdef CGAL_WORKAROUND_013
    typedef CGAL__Vector_2_rft_wrapper< CGAL_Cartesian<ft> >* dummy_W2ptr;
    typedef CGAL__Vector_3_rft_wrapper< CGAL_Cartesian<ft> >* dummy_W3ptr;
#endif // CGAL_WORKAROUND_013

static    FT make_FT(const RT & num, const RT& denom)
        { return num/denom;}
static   FT make_FT(const RT & num)
        { return num;}
static   RT FT_numerator(const FT &r)
        { return r;}
static   RT FT_denominator(const FT &)
        { return RT(1);}
};

#endif  // CGAL_CARTESIAN_REP_H
@}

@C@<A generic header file for cartesian representation@>

The following header file is the first thing to include
by an application. It tells the compiler to include the right
implementation files going together with an interface class.

@O@<../include/CGAL/Cartesian.h@>==@{@-
// Source: Cartesian.h
// Author: Andreas.Fabri@@sophia.inria.fr

#ifndef CGAL_CARTESIAN_H
#define CGAL_CARTESIAN_H



#include <CGAL/basic.h>

#include <CGAL/cartesian_classes.h>
#include <CGAL/user_classes.h>
#include <CGAL/cartesian_rep.h>

#endif // CGAL_CARTESIAN_H
@}

@! $Log: Cartesian.fw,v $
@! Revision 1.1  1996/08/28 11:54:24  fabri
@! Initial revision
@!
@! Revision 1.1  1996/03/13 15:32:23  fabri
@! Initial revision
@! Revision 1.1  1995/08/16 11:58:17  fabri
@! Initial revision
@!
