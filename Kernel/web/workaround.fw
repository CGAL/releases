@! $RCSfile: workaround.fw,v $
@! $Revision: 1.4 $
@! $Date: 1996/03/13 15:32:23 $

@! Author: Andreas.Fabri@@sophia.inria.fr


@B@<Workarounds@>

Sometimes we have to do nasty things to make the compiler do what we really
want. In this section we only list the preprocessor flags and where they
are used. What the workaround is will be explained there.

@C@<CGAL_WORKAROUND_001@>

The SGI C++ Compiler has problems with the declaration of inlined friend
functions.

@$@<SGI workarounds@>+=@{@-
#define CGAL_WORKAROUND_001
@}

In: PointC2.fw, VectorC2.fw




@C@<CGAL_WORKAROUND_002@>

The SUN Pro Compiler does not match a templated global operator  with a base
class parameter if it is called with a derived class.

@$@<SUN workarounds@>+=@{@-
#define CGAL_WORKAROUND_002
@}

In: Aff\_TransformationC2.fw

@C@<CGAL_WORKAROUND_003@>

gcc has problems with a friend declaration of a not yet declared
memberfunction. We declare the entire class friend.

@$@<GNU workarounds@>+=@{@-
#define CGAL_WORKAROUND_003
@}

In: Vector\_C2.fw

@C@<CGAL_WORKAROUND_004@>

gcc has problems with (not really) circular definitions of classes. This
concerns the compose operator of affine transformations. They are written
in a way that specializations are returned if possible. For example the
composition of two translations returns a translation.

The workaround here is to transform whatever transformation in the matrix
form and to compose those.

@$@<GNU workarounds@>+=@{@-
#define CGAL_WORKAROUND_004
@}

In: Aff\_TransformationC2.fw

@C@<CGAL_WORKAROUND_005@>

gcc has problems with member functions that have return values of a
type declared in the class, if the function is only declared and the
definition is given outside the class.

The workaround is to define it in the class.

@$@<GNU workarounds@>+=@{@-
#define CGAL_WORKAROUND_005
@}

In: intersection\_2\_1.fw



@C@<CGAL_WORKAROUND_006@>

SUN Pro CC has problems to inline some global operators. The linker
issues an undefined symbols message.

@$@<SUN workarounds@>+=@{@-
#define CGAL_WORKAROUND_006
@}
In PointC2.hw



@C@<CGAL_WORKAROUND_007@>

The GNU compiler does not perform the right match for the inner
product of two interface class vectors. It instead matches the
muliplication with a scalar from left global function.

The workaround is to rewrite the global operator for each
representation class. This has the disadvantage that the template
has to be defined for classes derived from {\tt C} or {\tt H}.


@$@<GNU workarounds@>+=@{@-
#define CGAL_WORKAROUND_007
@}

In: Vector\_2.fw


@C@<CGAL_WORKAROUND_008@>

The GNU compiler has problems with cyclic definitions, since it tries to
instantiate in cases where it is not needed, e.g. when a pointer to
a template class is seen. But this behavior can be used to built a workaround.
The problem occurs with @{Aff_transformationH2@}.
In the workaround a pointer to @{Aff_transformation_repH2@} is shown to
the compiler which breaks a cycle arising during GNU-like instantiation
of template classes in a somewhat magic way.


@$@<GNU workarounds@>+=@{@-
#define CGAL_WORKAROUND_008
@}

In: Aff\_transformationH2.h



@C@<CGAL_WORKAROUND_010@>

See in the file sq\_dist\_2.fw.


@$@<GNU workarounds@>+=@{@-
#define CGAL_WORKAROUND_010
@}

@$@<SUN workarounds@>+=@{@-
#define CGAL_WORKAROUND_010
@}



@C@<CGAL_WORKAROUND_012@>

Run Time Type Identification is not provided by all Compilers.

In: Object.h


@$@<SUN workarounds@>+=@{@-
#define CGAL_WORKAROUND_012
@}

@$@<SGI workarounds@>+=@{@-
#define CGAL_WORKAROUND_012
@}



@C@<CGAL_WORKAROUND_013@>

GNU has problems with (not really) cyclic use of types.

In: cartesian_rep.h


@$@<GNU workarounds@>+=@{@-
#define CGAL_WORKAROUND_013
@}




@C@<CGAL_WORKAROUND_015@>

GNU has problems with (not really) cyclic use of types.

The affine transformation should happen in a transform
method of the affine transformation.  The workaround is
to put the implementation in the line.

In: Aff_transformation_2.h, Aff_transformationC2.h


@$@<GNU workarounds@>+=@{@-
#define CGAL_WORKAROUND_015
@}


@O@<../include/CGAL/workaround.h@>==@{@-
@<CGAL notice@>
// Source: workaround.h
// Author: Andreas.Fabri@@sophia.inria.fr

#ifdef __sgi
@<SGI workarounds@>
#endif //  __sgi

#ifdef __GNUG__
@<GNU workarounds@>
#endif // __GNUG__


#ifdef __SUNPRO_CC
@<SUN workarounds@>
#endif // __SUNPRO_CC
@}

@! $Log: workaround.fw,v $
@! Revision 1.4  1996/03/13 15:32:23  fabri
@! *** empty log message ***
@!
@! Revision 1.3  1995/11/08 15:36:30  fabri
@! *** empty log message ***
@!
@! Revision 1.2  1995/10/19 18:01:10  fabri
@! *** empty log message ***
@!
@! Revision 1.1  1995/09/18 13:22:38  fabri
@! Initial revision
@!

