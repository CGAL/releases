
@! $RCSfile: testfields.fw,v $
@! $Revision: 1.3 $
@! $Date: 1996/03/13 15:32:23 $

@! Author: Geert-Jan Giezeman (geert@cs.ruu.nl)

@A@<Test fields@>

This file declares two number types, @{testfield1@} and @{testfield2@}, that
can be used to test whether templated algorithms use the appropriate
operations on fields.

The class @{testfield1@} declares only the most basic operations that should
be supported by any field type. @{testfield2@} declares some transcedental
functions (like square root) as well. Exact number types cannot be expected to
have those operations.

@B@<testfield1@>
@O@<../include/CGAL/testfield1.h@>==@{@-

#ifndef CGAL_TESTFIELD1_H
#define CGAL_TESTFIELD1_H

@<basic field@>@(testfield1@)
#endif
@}

@$@<basic field@>@(@1@)@M==@{@-
#include <bool.h>
#include <CGAL/Double.h>

class @1 {
public:
    @1() {}
    @1(double d) {_d = d;}
    @1 operator-() const {return @1(-_d);}
    @1 operator+(@1 tf) const {return @1(_d + tf._d);}
    @1 operator-(@1 tf) const {return @1(_d - tf._d);}
    @1 operator*(@1 tf) const {return @1(_d * tf._d);}
    @1 operator/(@1 tf) const {return @1(_d / tf._d);}
    double to_double() const {return _d;}
    bool operator==(@1 tf) const {return _d == tf._d;}
    bool operator!=(@1 tf) const {return _d != tf._d;}
    bool operator<(@1 tf) const {return _d < tf._d;}
    bool operator>(@1 tf) const {return _d > tf._d;}
    bool operator<=(@1 tf) const {return _d <= tf._d;}
    bool operator>=(@1 tf) const {return _d >= tf._d;}
protected:
    double _d;
};


inline bool CGAL_is_finite(@1 tf)
{
    return CGAL_is_finite(tf.to_double());
}

inline bool CGAL_is_valid(@1 tf)
{
    return CGAL_is_valid(tf.to_double());
}

inline @1 CGAL_abs(@1 tf)
{
    return @1(CGAL_abs(tf.to_double()));
}

inline double CGAL_to_double(@1 tf)
{
    return tf.to_double();
}
@}

@B@<testfield2@>

At the moment @{testfield2@} only has one routine more than @{testfield1@}:
the square root routine. Time must tell whether we need functions like
sin, cos, tan, asin, acos, atan and atan2 or others.

@O@<../include/CGAL/testfield2.h@>==@{@-

#ifndef CGAL_TESTFIELD2_H
#define CGAL_TESTFIELD2_H

@<basic field@>@(testfield2@)

inline testfield2 sqrt(testfield2 tf)
{
    return testfield2(sqrt(tf.to_double()));
}

#endif
@}

