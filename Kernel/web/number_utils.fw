
@B@<Utilities for number types@>

The template functions defined in this section define some useful
operations
on numbers in terms of more basic operations.

Those basic operations (zero element, comparison functions, taking the
opposite) are required to exist for number types.

Note that if a number type defines these operations itself those take
precedence over those templates.

@O@<../include/CGAL/number_utils.h@>==@{@-
@<CGAL notice@>
#ifndef CGAL_NUMBER_UTILS_H
#define CGAL_NUMBER_UTILS_H


#include <CGAL/enum.h>

template <class NT>
inline bool CGAL_is_zero(const NT &x)
{
    return x == NT(0);
}

template <class NT>
inline bool CGAL_is_negative(const NT &x)
{
    return x < NT(0);
}

template <class NT>
inline bool CGAL_is_positive(const NT &x)
{
    return x > NT(0);
}

template <class NT>
int CGAL_sign(const NT &x)
{
    return (x < NT(0)) ? -1: (x > NT(0)) ? 1 : 0;
}


template <class NT>
int CGAL_lexicographical_sign(const NT &x, const NT &y)
{
    return (x == NT(0)) ? CGAL_sign(y) : CGAL_sign(x);
}


template <class NT>
NT CGAL_abs(const NT &x)
{
    return (x >= NT(0)) ? x: -x;
}

template <class NT>
NT CGAL_min(const NT &x, const NT &y)
{
    return (x <= y) ? x: y;
}

template <class NT>
NT CGAL_max(const NT &x, const NT &y)
{
    return (x >= y) ? x: y;
}

template <class NT>
inline CGAL_Comparison_result CGAL_compare(const NT &n1, const NT &n2)
{
  if (n1 == n2){
    return CGAL_EQUAL;
  }
  return (n1 < n2) ? CGAL_SMALLER : CGAL_LARGER;
}

#endif
@}
