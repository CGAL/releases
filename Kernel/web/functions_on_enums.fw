
@C@<Basic functions on the enumeration types@>

Computing opposite values turns out to be useful.
@$@<opposites for enums@>+=@{@-
inline
CGAL_Orientation
CGAL_opposite(const CGAL_Orientation &o)
{
  return (o == CGAL_COUNTERCLOCKWISE) ?
               CGAL_CLOCKWISE :
               (o == CGAL_CLOCKWISE) ?
                     CGAL_COUNTERCLOCKWISE :
                     CGAL_COLLINEAR;
}

inline
CGAL_Oriented_side
CGAL_opposite(const CGAL_Oriented_side &os)
{
  return (os == CGAL_ON_POSITIVE_SIDE) ?
                CGAL_ON_NEGATIVE_SIDE :
                (os == CGAL_ON_NEGATIVE_SIDE) ?
                      CGAL_ON_POSITIVE_SIDE :
                      CGAL_ON_ORIENTED_BOUNDARY;
}

inline
CGAL_Bounded_side
CGAL_opposite(const CGAL_Bounded_side &bs)
{
  return (bs == CGAL_ON_UNBOUNDED_SIDE) ?
                CGAL_ON_BOUNDED_SIDE :
                (bs == CGAL_ON_BOUNDED_SIDE) ?
                       CGAL_ON_UNBOUNDED_SIDE :
                       CGAL_ON_BOUNDARY;
}
@}

@O@<../include/CGAL/functions_on_enums.h@>==@{@-
@<CGAL notice@>
#ifndef CGAL_FUNCTIONS_ON_ENUMS_H
#define CGAL_FUNCTIONS_ON_ENUMS_H

#include <CGAL/enum.h>

@<opposites for enums@>

#endif // CGAL_FUNCTIONS_ON_ENUMS_H
@}
