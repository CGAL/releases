
@B@<Homogeneous header file@>

The following header file is used with homogeneous representation.
It just says that some classes exist and are defined somewhere.
@O@<../include/CGAL/homogeneous_classes.h@>==@{@-
@<CGAL notice@>
// Source: homogeneous_classes.h
// Author: Stefan.Schirra@@mpi-sb.mpg.de
#ifndef CGAL_HOMOGENEOUS_CLASSES_H
#define CGAL_HOMOGENEOUS_CLASSES_H

@<classesH2@>
@<classesH3@>

#endif // CGAL_HOMOGENEOUS_CLASSES_H
@}

@$@<classesH2@>==@{@-
template < class FT, class RT >
class CGAL_PointH2;

template < class FT, class RT >
class CGAL_VectorH2;

template < class FT, class RT >
class CGAL_DirectionH2;

template < class FT, class RT >
class CGAL_LineH2;

template < class FT, class RT >
class CGAL_RayH2;

template < class FT, class RT >
class CGAL_SegmentH2;

template < class FT, class RT >
class CGAL_TriangleH2;

template < class FT, class RT >
class CGAL_CircleH2;

// template < class FT, class RT >
// class CGAL_PolygonH2;

template < class FT, class RT >
class CGAL_Iso_rectangleH2;

template < class FT, class RT >
class CGAL_Aff_transformationH2;
@}

@$@<classesH3@>==@{@-
template < class FT, class RT >
class CGAL_PointH3;

template < class FT, class RT >
class CGAL_VectorH3;

template < class FT, class RT >
class CGAL_DirectionH3;

template < class FT, class RT >
class CGAL_PlaneH3;

template < class FT, class RT >
class CGAL_LineH3;

template < class FT, class RT >
class CGAL_RayH3;

template < class FT, class RT >
class CGAL_SegmentH3;

template < class FT, class RT >
class CGAL_TriangleH3;

template < class FT, class RT >
class CGAL_Iso_rectangleH3;

template < class FT, class RT >
class CGAL_TetrahedronH3;

template < class FT, class RT >
class CGAL_Aff_transformationH3;
@}

The following class is the representation class for homogeneous
representation. The user can then use homogeneous points by a
typedef like
@{typedef CGAL_Point_2< CGAL_Homogeneous<CGAL_Filtered_integer> >  Point@}.
@$@<typedefs for homogeneous representation@>==@{@-
template<class nt>
class CGAL_Homogeneous
{
public:
// number-type

    typedef     nt                            RT;
    typedef     CGAL_Quotient<nt>             FT;

// two-dimensional

    typedef CGAL_PointH2<FT,RT>               Point_2;
    typedef CGAL_VectorH2<FT,RT>              Vector_2;
    typedef CGAL_DirectionH2<FT,RT>           Direction_2;

    typedef CGAL_Aff_transformationH2<FT,RT>  Aff_transformation_2;

    typedef CGAL_SegmentH2<FT,RT>             Segment_2;
    typedef CGAL_LineH2<FT,RT>                Line_2;
    typedef CGAL_RayH2<FT,RT>                 Ray_2;

    typedef CGAL_TriangleH2<FT,RT>            Triangle_2;
    typedef CGAL_CircleH2<FT,RT>              Circle_2;

    typedef CGAL_Iso_rectangleH2<FT,RT>       Iso_rectangle_2;

//    typedef CGAL_PolygonH2<FT,RT>             Polygon_2;

// three-dimensional

    typedef CGAL_PointH3<FT,RT>               Point_3;
    typedef CGAL_VectorH3<FT,RT>              Vector_3;
    typedef CGAL_DirectionH3<FT,RT>           Direction_3;

    typedef CGAL_Aff_transformationH3<FT,RT>  Aff_transformation_3;

    typedef CGAL_PlaneH3<FT,RT>               Plane_3;

    typedef CGAL_SegmentH3<FT,RT>             Segment_3;
    typedef CGAL_LineH3<FT,RT>                Line_3;
    typedef CGAL_RayH3<FT,RT>                 Ray_3;
    typedef CGAL_TriangleH3<FT,RT>            Triangle_3;

    typedef CGAL_Iso_rectangleH3<FT,RT>       Iso_rectangle_3;

    typedef CGAL_TetrahedronH3<FT,RT>         Tetrahedron_3;

#ifdef CGAL_WORKAROUND_013
    typedef CGAL__Vector_2_rft_wrapper< CGAL_Homogeneous<RT> >* W2ptr;
    typedef CGAL__Vector_3_rft_wrapper< CGAL_Homogeneous<RT> >* W3ptr;
#endif // CGAL_WORKAROUND_013

// Geert-Jan's additional features

  static
  FT
  make_FT(const RT & num, const RT& denom)
  {
   return FT(num, denom);
  }

  static
  FT
  make_FT(const RT & num)
  {
   return FT(num);
  }

  static
  RT
  FT_numerator(const FT &r)
  {
   return r.numerator();
  }

  static
  RT
  FT_denominator(const FT &r)
  {
   return r.denominator();
  }

};
@}

@O@<../include/CGAL/homogeneous_rep.h@>==@{@-
@<CGAL notice@>
// Source: homogeneous_rep.h
// Author: Stefan.Schirra@@mpi-sb.mpg.de
#ifndef CGAL_HOMOGENEOUS_REP_H
#define CGAL_HOMOGENEOUS_REP_H

#include <CGAL/Quotient.h>

@<typedefs for homogeneous representation@>
#endif // CGAL_HOMOGENEOUS_REP_H
@}

Here is the generic header file to be used with homogeneous
representation.
@O@<../include/CGAL/Homogeneous.h@>==@{@-
@<CGAL notice@>
// Source: Homogeneous.h
// Author: Stefan.Schirra@@mpi-sb.mpg.de

#ifndef CGAL_HOMOGENEOUS_H
#define CGAL_HOMOGENEOUS_H


#include <CGAL/basic.h>

#include <CGAL/user_classes.h>
#include <CGAL/homogeneous_classes.h>
#include <CGAL/homogeneous_rep.h>
#include <CGAL/basic_classes.h>

#endif // CGAL_HOMOGENEOUS_H
@}
