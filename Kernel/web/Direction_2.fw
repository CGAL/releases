@! $RCSfile: Direction_2.fw,v $
@! $Revision: 1.4 $
@! $Date: 1996/06/07 15:56:39 $



@C@<Class CGAL_Direction_2<R>@>
A direction is somewhat similar to a vector, but there are some differences.
It has no length, and directions cannot be added.
@$@<class CGAL_Direction_2<R>@>==@{@-
template < class R >
class CGAL_Direction_2 : public R::Direction_2
{
public:
  CGAL_Direction_2()
  {}

  CGAL_Direction_2(const CGAL_Direction_2<R> &d)
    : R::Direction_2((const R::Direction_2&)d)
  {}


  CGAL_Direction_2(const R::Direction_2 &d)
    : R::Direction_2(d)
  {}


  CGAL_Direction_2(const R::Vector_2 &v)
    : R::Direction_2(v)
  {}

  CGAL_Direction_2(const R::RT &x, const R::RT &y)
    :  R::Direction_2(x,y)
  {}

  CGAL_Direction_2<R> &operator=(const CGAL_Direction_2<R> &d)
  {
    R::Direction_2::operator=(d);
    return *this;
  }


  bool operator==(const CGAL_Direction_2<R> &d) const
  {
    return R::Direction_2::operator==(d);
  }

  bool operator!=(const CGAL_Direction_2<R> &d) const
  {
    return !(*this == d);
  }

  bool operator>=(const CGAL_Direction_2<R> &d) const
  {
    return R::Direction_2::operator>=(d);
  }

  bool operator<=(const CGAL_Direction_2<R> &d) const
  {
    return R::Direction_2::operator<=(d);
  }

  bool operator>(const CGAL_Direction_2<R> &d) const
  {
    return R::Direction_2::operator>(d);
  }

  bool operator<(const CGAL_Direction_2<R> &d) const
  {
    return R::Direction_2::operator<(d);
  }

  bool counterclockwise_in_between(const CGAL_Direction_2<R> &d1,
                                   const CGAL_Direction_2<R> &d2) const
  {
    return R::Direction_2::counterclockwise_in_between(d1,d2);
  }

  int id() const
  {
    return (int)PTR;
  }

  CGAL_Vector_2<R> vector() const
  {
    return (CGAL_Vector_2<R>)R::Direction_2::vector();
  }

  CGAL_Direction_2<R> transform(const CGAL_Aff_transformation_2<R> &t) const
  {
    return R::Direction_2::transform((const R::Aff_transformation_2&)(t));
  }

  CGAL_Direction_2<R> operator-() const
  {
    return R::Direction_2::operator-();
  }


  R::FT delta(int i) const
  {
    return R::Direction_2::delta(i);
  }

  R::FT dx() const
  {
    return R::Direction_2::dx();
  }

  R::FT dy() const
  {
    return R::Direction_2::dy();
  }
};
@}


@D@<Header File@>

@O@<../include/CGAL/Direction_2.h@>==@{@-
@<CGAL notice@>
// Source: Direction_2.h
// Author: Andreas.Fabri@@sophia.inria.fr

#ifndef CGAL_DIRECTION_2_H
#define CGAL_DIRECTION_2_H

#ifdef CGAL_HOMOGENEOUS_H
#include <CGAL/DirectionH2.h>
#endif  // CGAL_HOMOGENEOUS_H

#ifdef CGAL_CARTESIAN_H
#include <CGAL/DirectionC2.h>
#endif // CGAL_CARTESIAN_H

#include <CGAL/Vector_2.h>

@<class CGAL_Direction_2<R>@>

#endif // CGAL_DIRECTION_2_H
@}

@! $Log: Direction_2.fw,v $
@! Revision 1.4  1996/06/07 15:56:39  fabri
@! *** empty log message ***
@!
@! Revision 1.3  1996/03/13 15:32:23  fabri
@! *** empty log message ***
@!
@! Revision 1.2  1995/11/06 17:39:50  fabri
@! compiles with GNU g++
@!
@! Revision 1.1  1995/10/19 18:01:10  fabri
@! Initial revision
@!
