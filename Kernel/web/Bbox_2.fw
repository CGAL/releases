@! $RCSfile: Bbox_2.fw,v $
@! $Revision: 1.3 $
@! $Date: 1996/03/13 15:32:23 $

@! Author: Andreas.Fabri@@sophia.inria.fr


@A@<Bounding Boxes@>
@B@<Bounding Boxes@>

@C@<Class CGAL_Bbox_2@>

Each class of geometric objects has a member function @{bbox()@}
returning a box containg an instance of this class. Boxes only know
how to combine each other into larger boxes. This makes the whole
thing conceptually easy. However, we waste space and time by creating
boxes with 0 width and height.

@$@<class CGAL_Bbox_2@>==@{@-
class CGAL_Bbox_2 : public CGAL_Handle
{
public:
                         CGAL_Bbox_2();
                         CGAL_Bbox_2(const CGAL_Bbox_2 &);
                         CGAL_Bbox_2(double x_min, double y_min,
                                   double x_max, double y_max);
                         ~CGAL_Bbox_2();
  CGAL_Bbox_2            &operator=(const CGAL_Bbox_2 &b);
  bool                   operator==(const CGAL_Bbox_2 &b) const;
  bool                   operator!=(const CGAL_Bbox_2 &b) const;

  int                    dimension() const;
  double                 xmin() const;
  double                 ymin() const;
  double                 xmax() const;
  double                 ymax() const;

  double                 max(int i) const;
  double                 min(int i) const;

  CGAL_Bbox_2              operator+(const CGAL_Bbox_2 &b) const;

private:
  inline CGAL__Fourtuple<double>*   ptr() const;
};
@}

@D@<Constructors and Destructors@>

@$@<code templates of CGAL_Bbox_2@>+=@{@-
CGAL_Bbox_2::CGAL_Bbox_2()
{
  PTR = new CGAL__Fourtuple<double>();
}

CGAL_Bbox_2::CGAL_Bbox_2(const CGAL_Bbox_2 &b) :
  CGAL_Handle(b)
{}

CGAL_Bbox_2::CGAL_Bbox_2(double x_min, double y_min,
                         double x_max, double y_max)
{
  PTR = new CGAL__Fourtuple<double>(x_min, y_min, x_max, y_max);
}

CGAL_Bbox_2::~CGAL_Bbox_2()
{}

CGAL_Bbox_2 &CGAL_Bbox_2::operator=(const CGAL_Bbox_2 &b)
{
  CGAL_Handle::operator=(b);
  return *this;
}
@}

@D@<Equalness and Identity@>

Should these functions be defined???

@$@<code templates of CGAL_Bbox_2@>+=@{@-
bool CGAL_Bbox_2::operator==(const CGAL_Bbox_2 &b) const
{
  return xmin() == b.xmin() && xmax() == b.xmax()
         && ymin() == b.ymin() && ymax() == b.ymax();
}

bool CGAL_Bbox_2::operator!=(const CGAL_Bbox_2 &b) const
{
  return ! (b == *this);
}
@}

@D@<Access Functions@>

@$@<inline code of CGAL_Bbox_2@>+=@{@-

inline CGAL__Fourtuple<double>* CGAL_Bbox_2::ptr() const
{
  return (CGAL__Fourtuple<double>*)PTR;
}

inline int CGAL_Bbox_2::dimension() const
{
  return 2;
}

inline double CGAL_Bbox_2::xmin() const
{
  return ptr()->e0;
}

inline double CGAL_Bbox_2::ymin() const
{
  return ptr()->e1;
}

inline double CGAL_Bbox_2::xmax() const
{
  return ptr()->e2;
}

inline double CGAL_Bbox_2::ymax() const
{
  return ptr()->e3;
}

inline double CGAL_Bbox_2::min(int i) const
{
  CGAL_kernel_precondition( (i == 0 ) || ( i == 1 ) );
  if(i == 0) {
    return xmin();
  }
  return ymin();
}

inline double CGAL_Bbox_2::max(int i) const
{
  CGAL_kernel_precondition( (i == 0 ) || ( i == 1 ) );
  if(i == 0) {
    return xmax();
  }
  return ymax();
}
@}

@D@<Operators@>

@$@<inline code of CGAL_Bbox_2@>+=@{@-
inline CGAL_Bbox_2 CGAL_Bbox_2::operator+(const CGAL_Bbox_2 &b) const
{
  return CGAL_Bbox_2(CGAL_min(xmin(), b.xmin()),
                     CGAL_min(ymin(), b.ymin()),
                     CGAL_max(xmax(), b.xmax()),
                     CGAL_max(ymax(), b.ymax()));
}
@}



@D@<Related functions@>

@$@<inline code of CGAL_Bbox_2@>+=@{@-
inline bool CGAL_do_overlap(const CGAL_Bbox_2 &bb1, const CGAL_Bbox_2 &bb2)
{
    // check for emptiness ??
    if (bb1.xmax() < bb2.xmin() || bb2.xmax() < bb1.xmin())
        return false;
    if (bb1.ymax() < bb2.ymin() || bb2.ymax() < bb1.ymin())
        return false;
    return true;
}
@}


@O@<../src/Bbox_2.C@>==@{@-
@<CGAL notice@>
#include <CGAL/Bbox_2.h>

@<code templates of CGAL_Bbox_2@>
@}

@D@<Header File@>

@O@<../include/CGAL/Bbox_2.h@>==@{@-
@<CGAL notice@>
// Source: Bbox_2.h
// Author: Andreas.Fabri@@sophia.inria.fr

#ifndef CGAL_BBOX_2_H
#define CGAL_BBOX_2_H


#include <CGAL/basic.h>
#include <CGAL/cartesian_classes.h>
#include <CGAL/Fourtuple.h>

@<class CGAL_Bbox_2@>

@<inline code of CGAL_Bbox_2@>
#endif // CGAL_BBOX_2_H
@}

