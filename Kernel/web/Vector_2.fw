@! $RCSfile: Vector_2.fw,v $
@! $Revision: 1.4 $
@! $Date: 1996/08/30 11:37:44 $


@C@<Class CGAL_Vector_2<R>@>

@$@<class CGAL_Vector_2<R>@>==@{@-
template < class R >
class CGAL_Vector_2 : public R::Vector_2
{
#ifdef CGAL_WORKAROUND_001
friend CGAL_Vector_2<R> operator-(const CGAL_Point_2<R> &p,
                                  const CGAL_Origin &o);
#else
friend inline CGAL_Vector_2<R> operator-(const CGAL_Point_2<R> &p,
                                         const CGAL_Origin &o);
#endif  // CGAL_WORKAROUND_001

public:
  CGAL_Vector_2()
  {}

  CGAL_Vector_2(const CGAL_Vector_2<R> &v)
    : R::Vector_2((const R::Vector_2&)v)
  {}

  CGAL_Vector_2(const R::Vector_2 &v)
    : R::Vector_2(v)
  {}

  CGAL_Vector_2(const CGAL_Null_vector &v)
    : R::Vector_2(v)
  {}

  CGAL_Vector_2(const R::RT &x, const R::RT &y)
    : R::Vector_2(x,y)
  {}

  CGAL_Vector_2(const R::RT &x, const R::RT &y, const R::RT &w)
    : R::Vector_2(x,y,w)
  {}



  CGAL_Vector_2<R> &operator=(const CGAL_Vector_2<R> &v)
  {
    R::Vector_2::operator=(v);
    return *this;
  }

#ifdef CGAL_VECTOR_WRAPPER
  CGAL_Vector_2<R> &operator=(const CGAL__Vector_2_rft_wrapper<R> &wrapper)
  {
    R::Vector_2::operator=((const CGAL_Vector_2<R>&)wrapper);
    return *this;
  }

  bool operator==(const CGAL__Vector_2_rft_wrapper<R> &wrapper) const
  {
    return R::Vector_2::operator==((const CGAL_Vector_2<R>&)wrapper);
  }

  bool operator!=(const CGAL__Vector_2_rft_wrapper<R> &wrapper) const
  {
    return !(*this == (const CGAL_Vector_2<R>&)wrapper);
  }

#endif // CGAL_VECTOR_WRAPPER

  bool operator==(const CGAL_Vector_2<R> &v) const
  {
    return R::Vector_2::operator==(v);
  }

  bool operator!=(const CGAL_Vector_2<R> &v) const
  {
    return !(*this == v);
  }

  bool operator==(const CGAL_Null_vector &v) const
  {
    return R::Vector_2::operator==(v);
  }

  bool operator!=(const CGAL_Null_vector &v) const
  {
    return !(*this == v);
  }

  int  id() const
  {
    return (int) PTR ;
  }

  R::RT hx() const
  {
    return R::Vector_2::hx();
  }

  R::RT hy() const
  {
    return R::Vector_2::hy();
  }

  R::RT hw() const
  {
    return R::Vector_2::hw();
  }

  R::FT x() const
  {
    return R::Vector_2::x();
  }

  R::FT y() const
  {
    return R::Vector_2::y();
  }

  R::RT homogeneous(int i) const
  {
    return R::Vector_2::homogeneous(i);
  }

  R::FT cartesian(int i) const
  {
    return R::Vector_2::cartesian(i);
  }

  R::FT operator[](int i) const
  {
    return cartesian(i);
  }


  int dimension() const
  {
    return 2;
  }


  CGAL_Vector_2<R> operator+(const CGAL_Vector_2 &w) const
  {
    return (const R::Vector_2&)(*this) + (const R::Vector_2&)(w);
  }

  CGAL_Vector_2<R> operator-(const CGAL_Vector_2 &w) const
  {
    return (const R::Vector_2&)(*this) - (const R::Vector_2&)(w);
  }

  CGAL_Vector_2<R> operator-() const
  {
    return R::Vector_2::operator-();
  }

  R::FT operator*(const CGAL_Vector_2 &w) const
  {
    return (const R::Vector_2&)(*this) * (const R::Vector_2&)(w);
  }

#ifndef CGAL_VECTOR_WRAPPER
  CGAL_Vector_2<R> operator*(const R::RT &c) const
  {
    return c * (const R::Vector_2&)(*this);
  }


  CGAL_Vector_2<R> operator*(const CGAL_Quotient<R::RT> &q) const
  {
    return (q.numerator() * (const R::Vector_2&)(*this)) /
           q.denominator();
  }
#endif // CGAL_VECTOR_WRAPPER

  CGAL_Vector_2<R> operator/(const R::RT &c) const
  {
    return (const R::Vector_2&)(*this) / c;
  }

  CGAL_Direction_2<R> direction() const
  {
    return R::Vector_2::direction();
  }

  CGAL_Vector_2<R> perpendicular(const CGAL_Orientation &o) const
  {
    return R::Vector_2::perpendicular(o);
  }

  CGAL_Vector_2<R> transform(const CGAL_Aff_transformation_2<R> &t) const
  {
    return R::Vector_2::transform(t);
  }


private:
  CGAL_Vector_2(const CGAL_Point_2<R> &p)
    : R::Vector_2(p)
  {}

  CGAL_Vector_2(const CGAL_Direction_2<R> &d)
    : R::Vector_2(d)
  {}

};
@}


The following function returns a tag that is used in order to match
the right multiplication function (see below).

@$@<code templates of CGAL_Vector_2<FT>@>+=@{@-
template < class R >
CGAL_No_number_tag CGAL_number_type_tag(const CGAL_Vector_2<R> &)
{
  return CGAL_No_number_tag();
}
@}


There are three multiplications: scalar/vector, quotient/vector and
vector/vector multiplication. We have to work with tags to
distinguish them. We further have to wrap the result in an object
that can contain a vector (when we multiply a scalar with a vector)
 and a number of the type R::FT (when we multiply two vectors).
The wrapper class itself has conversion operators to the types
it contains. This makes it transparent to the user.

We only need this workaround until compilers match the most
specific template.

@$@<code templates of CGAL_Vector_2<FT>@>+=@{@-
#ifdef CGAL_VECTOR_WRAPPER
template <class T, class R>
CGAL__Vector_2_rft_wrapper<R> CGAL_multiply(const CGAL_Quotient<T> &q,
                                           const CGAL_Vector_2<R> &w,
                                           const CGAL_Quotient_tag&)
{
  return CGAL__Vector_2_rft_wrapper<R>(
                 CGAL_Vector_2<R>((q.numerator() * (const R::Vector_2&)(w))
                                  / q.denominator()));
}

template < class R >
CGAL__Vector_2_rft_wrapper<R> CGAL_multiply(const CGAL_Vector_2<R> &v,
                                           const CGAL_Vector_2<R> &w,
                                           const CGAL_No_number_tag&)
{
  return CGAL__Vector_2_rft_wrapper<R>((const R::Vector_2&)(v)
                                      * (const R::Vector_2&)(w));
}

template < class T, class R >
CGAL__Vector_2_rft_wrapper<R> CGAL_multiply(const T &n,
                                           const CGAL_Vector_2<R> &w,
                                           const CGAL_Number_tag&)
{
  return CGAL__Vector_2_rft_wrapper<R>(
                 CGAL_Vector_2<R>(R::RT(n) * (const R::Vector_2&)(w)));
}

template <class T, class R>
CGAL__Vector_2_rft_wrapper<R> operator*(const T &t,
                                       const CGAL_Vector_2<R> &w)
{
  return CGAL_multiply(t, w, CGAL_number_type_tag(t));
}
#endif // CGAL_VECTOR_WRAPPER
@}

@D@<Header File@>

@O@<../include/CGAL/Vector_2.h@>==@{@-
@<CGAL notice@>
// Source: Vector_2.h
// Author: Andreas.Fabri@@sophia.inria.fr

#ifndef CGAL_VECTOR_2_H
#define CGAL_VECTOR_2_H


#include <CGAL/Point_2.h>
#include <CGAL/Direction_2.h>

#ifdef CGAL_VECTOR_WRAPPER
#include <CGAL/Vector_2_rft_wrapper.h>
#endif // CGAL_VECTOR_WRAPPER

@<class CGAL_Vector_2<R>@>

@<code templates of CGAL_Vector_2<FT>@>

#endif
@}

@! $Log: Vector_2.fw,v $
@! Revision 1.4  1996/08/30 11:37:44  fabri
@! before adding the scalar multiplication with a quotient
@!
@! Revision 1.3  1996/03/13 15:32:23  fabri
@! *** empty log message ***
@!
@! Revision 1.2  1995/11/03 09:09:58  fabri
@!  added hx(), hy() and homogeneous(int i)
@!
@! Revision 1.1  1995/10/19 18:01:10  fabri
@! Initial revision
@!
