// This is an extract from include/CGAL/predicates_on_ftC2.h
// It's a template predicate.

#ifndef CGAL_ARITHMETIC_FILTER_TEMPLATE_PREDICATES_ON_FT_H
#define CGAL_ARITHMETIC_FILTER_TEMPLATE_PREDICATES_ON_FT_H

// This file is automatically generated with the script for filtering
// predicates, using Interval arithmetic.

#include <CGAL/Interval_arithmetic.h>

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_xC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                 const CGAL_Filtered_exact<CT,ET> &l1a,
	const CGAL_Filtered_exact<CT,ET> &l1b,
	const CGAL_Filtered_exact<CT,ET> &l1c,
	                 const CGAL_Filtered_exact<CT,ET> &l2a,
	const CGAL_Filtered_exact<CT,ET> &l2b,
	const CGAL_Filtered_exact<CT,ET> &l2c)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_xC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(l1a.value),
		CGAL_convert_to<IA>(l1b.value),
		CGAL_convert_to<IA>(l1c.value),
		CGAL_convert_to<IA>(l2a.value),
		CGAL_convert_to<IA>(l2b.value),
		CGAL_convert_to<IA>(l2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_xC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(l1a.value),
		CGAL_convert_to<ET>(l1b.value),
		CGAL_convert_to<ET>(l1c.value),
		CGAL_convert_to<ET>(l2a.value),
		CGAL_convert_to<ET>(l2b.value),
		CGAL_convert_to<ET>(l2c.value));
  }
  return result;
}

#ifdef CGAL_ARITHMETIC_FILTER_H
#include <CGAL/Arithmetic_filter/template_predicates_on_ft.h>
#endif

#endif // CGAL_ARITHMETIC_FILTER_TEMPLATE_PREDICATES_ON_FT_H
