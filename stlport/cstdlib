/*
 * Copyright (c) 1999 
 * Boris Fomitchev
 *
 * This material is provided "as is", with absolutely no warranty expressed
 * or implied. Any use is at your own risk.
 *
 * Permission to use or copy this software for any purpose is hereby granted 
 * without fee, provided the above notices are retained on all copies.
 * Permission to modify the code and to distribute modified code is granted,
 * provided the above notices are retained, and a notice that the code was
 * modified is included with the above copyright notice.
 *
 */

#ifndef __STLPORT_CSTDLIB
# define __STLPORT_CSTDLIB

# ifndef __STL_CONFIG_H
#  include <stl_config.h>
# endif

#  if defined ( __STL_REDEFINE_STD ) && defined (std) 
#    undef std
#    define __STL_RESUME_STD_FOR_CSTDLIB
#    define __STLPORT_NATIVE_PASS
#  endif

# if defined (__STL_USE_NEW_C_HEADERS)
#  include __STL_NATIVE_CPP_C_HEADER(cstdlib)
# else
#  include __STL_NATIVE_C_HEADER(stdlib.h)
# endif

# ifdef __STL_IMPORT_VENDOR_CSTD 
__STL_BEGIN_NAMESPACE

// Table 18
using __STL_VENDOR_CSTD::abort;
using __STL_VENDOR_CSTD::atexit;
using __STL_VENDOR_CSTD::exit;

// Table 23
using __STL_VENDOR_CSTD::getenv;

// Table 33
using __STL_VENDOR_CSTD::calloc;
using __STL_VENDOR_CSTD::free;
using __STL_VENDOR_CSTD::malloc;
using __STL_VENDOR_CSTD::realloc;

// Table 49
using __STL_VENDOR_CSTD::atof;
using __STL_VENDOR_CSTD::atoi;
using __STL_VENDOR_CSTD::atol;
using __STL_VENDOR_CSTD::mblen;
using __STL_VENDOR_CSTD::mbstowcs;
using __STL_VENDOR_CSTD::mbtowc;
using __STL_VENDOR_CSTD::strtod;
using __STL_VENDOR_CSTD::strtol;
using __STL_VENDOR_CSTD::strtoul;

#if ! (defined (__STL_NO_NATIVE_WIDE_STREAMS) || defined (__STL_NO_MBSTATE_T))
using __STL_VENDOR_CSTD::wcstombs;
using __STL_VENDOR_CSTD::wctomb;
#endif

// Table 78
using __STL_VENDOR_CSTD::bsearch;
using __STL_VENDOR_CSTD::qsort;
__STL_END_NAMESPACE
# endif /* __STL_IMPORT_VENDOR_CSTD */

// Table 81

// dwa 2/28/99 - work around MSL bugs. Not strictly correct (actual
// namespace where div_t is defined is detectable), but probably the
// best we can do. We expect this to be fixed by the time Pro5 is
// released.
# if defined( __MSL__ ) && __MSL__ <= 0x5003
namespace std {
	typedef ::div_t div_t;
	typedef ::ldiv_t ldiv_t;
#  ifdef __MSL_LONGLONG_SUPPORT__
	typedef ::lldiv_t lldiv_t;
#  endif
}
# endif

# ifdef __STL_IMPORT_VENDOR_CSTD
__STL_BEGIN_NAMESPACE
  
using __STL_VENDOR_CSTD::div_t;
using __STL_VENDOR_CSTD::ldiv_t;
# ifdef __STL_LONG_LONG
// using __STL_VENDOR_CSTD::lldiv_t;
# endif
using __STL_VENDOR_CSTD::size_t;

using __STL_VENDOR_CSTD::abs;
using __STL_VENDOR_CSTD::div;
using __STL_VENDOR_CSTD::labs;
using __STL_VENDOR_CSTD::ldiv;
using __STL_VENDOR_CSTD::rand;
using __STL_VENDOR_CSTD::srand;

__STL_END_NAMESPACE

#endif /* __STL_IMPORT_VENDOR_CSTD */

# if defined ( __STL_RESUME_STD_FOR_CSTDLIB )
#    undef __STL_RESUME_STD_FOR_CSTDLIB
#    define std __STLPORT_NAMESPACE
#    undef __STLPORT_NATIVE_PASS
# endif

#endif /* __STLPORT_CSTDLIB */

// Local Variables:
// mode:C++
// End:
