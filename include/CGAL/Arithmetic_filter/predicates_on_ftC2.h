// ======================================================================
//
// Copyright (c) 1998 The CGAL Consortium
//
// This software and related documentation is part of the
// Computational Geometry Algorithms Library (CGAL).
//
// Every use of CGAL requires a license. Licenses come in three kinds:
//
// - For academic research and teaching purposes, permission to use and
//   copy the software and its documentation is hereby granted free of  
//   charge, provided that
//   (1) it is not a component of a commercial product, and
//   (2) this notice appears in all copies of the software and
//       related documentation.
// - Development licenses grant access to the source code of the library 
//   to develop programs. These programs may be sold to other parties as 
//   executable code. To obtain a development license, please contact
//   the CGAL Consortium (at cgal@cs.uu.nl).
// - Commercialization licenses grant access to the source code and the
//   right to sell development licenses. To obtain a commercialization 
//   license, please contact the CGAL Consortium (at cgal@cs.uu.nl).
//
// This software and documentation is provided "as-is" and without
// warranty of any kind. In no event shall the CGAL Consortium be
// liable for any damage of any kind.
//
// The CGAL Consortium consists of Utrecht University (The Netherlands),
// ETH Zurich (Switzerland), Free University of Berlin (Germany),
// INRIA Sophia-Antipolis (France), Martin-Luther-University Halle-Wittenberg
// (Germany) Max-Planck-Institute Saarbrucken (Germany), RISC Linz (Austria),
// and Tel-Aviv University (Israel).
//
// ----------------------------------------------------------------------
//
// release       : CGAL-1.2
// release_date  : 1999, January 18
//
// file          : include/CGAL/Arithmetic_filter/predicates_on_ftC2.h
// package       : Interval_arithmetic (2.7)
// source        : include/CGAL/predicates_on_ftC2.h
// revision      : $Revision: 1.3 $
// revision_date :
// author(s)     : Sylvain.Pion
//
// coordinator   : INRIA Sophia-Antipolis
//
//
// email         : cgal@cs.uu.nl
//
// ======================================================================


#ifndef CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC2_H
#define CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC2_H

// This file is automatically generated with the script for filtering
// predicates, using Interval arithmetic.

#include <CGAL/Interval_arithmetic.h>

#ifndef CGAL_DETERMINANT_H
#include <CGAL/determinant.h>
#endif // CGAL_DETERMINANT_H

#ifndef CGAL_BASIC_CONSTRUCTIONS_FTC2_H
#include <CGAL/basic_constructions_ftC2.h>
#endif

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_xC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                 const CGAL_Filtered_exact<CT,ET> &l1a,
	const CGAL_Filtered_exact<CT,ET> &l1b,
	const CGAL_Filtered_exact<CT,ET> &l1c,
	                 const CGAL_Filtered_exact<CT,ET> &l2a,
	const CGAL_Filtered_exact<CT,ET> &l2b,
	const CGAL_Filtered_exact<CT,ET> &l2c)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_xC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(l1a.value),
		CGAL_convert_to<IA>(l1b.value),
		CGAL_convert_to<IA>(l1c.value),
		CGAL_convert_to<IA>(l2a.value),
		CGAL_convert_to<IA>(l2b.value),
		CGAL_convert_to<IA>(l2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_xC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(l1a.value),
		CGAL_convert_to<ET>(l1b.value),
		CGAL_convert_to<ET>(l1c.value),
		CGAL_convert_to<ET>(l2a.value),
		CGAL_convert_to<ET>(l2b.value),
		CGAL_convert_to<ET>(l2c.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_xC2(const CGAL_Filtered_exact<CT,ET> &l1a,
	const CGAL_Filtered_exact<CT,ET> &l1b,
	const CGAL_Filtered_exact<CT,ET> &l1c,
	                 const CGAL_Filtered_exact<CT,ET> &l2a,
	const CGAL_Filtered_exact<CT,ET> &l2b,
	const CGAL_Filtered_exact<CT,ET> &l2c,
	                 const CGAL_Filtered_exact<CT,ET> &h1a,
	const CGAL_Filtered_exact<CT,ET> &h1b,
	const CGAL_Filtered_exact<CT,ET> &h1c,
	                 const CGAL_Filtered_exact<CT,ET> &h2a,
	const CGAL_Filtered_exact<CT,ET> &h2b,
	const CGAL_Filtered_exact<CT,ET> &h2c)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_xC2(
		CGAL_convert_to<IA>(l1a.value),
		CGAL_convert_to<IA>(l1b.value),
		CGAL_convert_to<IA>(l1c.value),
		CGAL_convert_to<IA>(l2a.value),
		CGAL_convert_to<IA>(l2b.value),
		CGAL_convert_to<IA>(l2c.value),
		CGAL_convert_to<IA>(h1a.value),
		CGAL_convert_to<IA>(h1b.value),
		CGAL_convert_to<IA>(h1c.value),
		CGAL_convert_to<IA>(h2a.value),
		CGAL_convert_to<IA>(h2b.value),
		CGAL_convert_to<IA>(h2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_xC2(
		CGAL_convert_to<ET>(l1a.value),
		CGAL_convert_to<ET>(l1b.value),
		CGAL_convert_to<ET>(l1c.value),
		CGAL_convert_to<ET>(l2a.value),
		CGAL_convert_to<ET>(l2b.value),
		CGAL_convert_to<ET>(l2c.value),
		CGAL_convert_to<ET>(h1a.value),
		CGAL_convert_to<ET>(h1b.value),
		CGAL_convert_to<ET>(h1c.value),
		CGAL_convert_to<ET>(h2a.value),
		CGAL_convert_to<ET>(h2b.value),
		CGAL_convert_to<ET>(h2c.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_y_at_xC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                      const CGAL_Filtered_exact<CT,ET> &la,
	const CGAL_Filtered_exact<CT,ET> &lb,
	const CGAL_Filtered_exact<CT,ET> &lc)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_y_at_xC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(la.value),
		CGAL_convert_to<IA>(lb.value),
		CGAL_convert_to<IA>(lc.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_y_at_xC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(la.value),
		CGAL_convert_to<ET>(lb.value),
		CGAL_convert_to<ET>(lc.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_y_at_xC2(const CGAL_Filtered_exact<CT,ET> &px,
	                      const CGAL_Filtered_exact<CT,ET> &l1a,
	const CGAL_Filtered_exact<CT,ET> &l1b,
	const CGAL_Filtered_exact<CT,ET> &l1c,
	                      const CGAL_Filtered_exact<CT,ET> &l2a,
	const CGAL_Filtered_exact<CT,ET> &l2b,
	const CGAL_Filtered_exact<CT,ET> &l2c)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_y_at_xC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(l1a.value),
		CGAL_convert_to<IA>(l1b.value),
		CGAL_convert_to<IA>(l1c.value),
		CGAL_convert_to<IA>(l2a.value),
		CGAL_convert_to<IA>(l2b.value),
		CGAL_convert_to<IA>(l2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_y_at_xC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(l1a.value),
		CGAL_convert_to<ET>(l1b.value),
		CGAL_convert_to<ET>(l1c.value),
		CGAL_convert_to<ET>(l2a.value),
		CGAL_convert_to<ET>(l2b.value),
		CGAL_convert_to<ET>(l2c.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_y_at_xC2(const CGAL_Filtered_exact<CT,ET> &l1a,
	const CGAL_Filtered_exact<CT,ET> &l1b,
	const CGAL_Filtered_exact<CT,ET> &l1c,
	                      const CGAL_Filtered_exact<CT,ET> &l2a,
	const CGAL_Filtered_exact<CT,ET> &l2b,
	const CGAL_Filtered_exact<CT,ET> &l2c,
	                      const CGAL_Filtered_exact<CT,ET> &ha,
	const CGAL_Filtered_exact<CT,ET> &hb,
	const CGAL_Filtered_exact<CT,ET> &hc)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_y_at_xC2(
		CGAL_convert_to<IA>(l1a.value),
		CGAL_convert_to<IA>(l1b.value),
		CGAL_convert_to<IA>(l1c.value),
		CGAL_convert_to<IA>(l2a.value),
		CGAL_convert_to<IA>(l2b.value),
		CGAL_convert_to<IA>(l2c.value),
		CGAL_convert_to<IA>(ha.value),
		CGAL_convert_to<IA>(hb.value),
		CGAL_convert_to<IA>(hc.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_y_at_xC2(
		CGAL_convert_to<ET>(l1a.value),
		CGAL_convert_to<ET>(l1b.value),
		CGAL_convert_to<ET>(l1c.value),
		CGAL_convert_to<ET>(l2a.value),
		CGAL_convert_to<ET>(l2b.value),
		CGAL_convert_to<ET>(l2c.value),
		CGAL_convert_to<ET>(ha.value),
		CGAL_convert_to<ET>(hb.value),
		CGAL_convert_to<ET>(hc.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_compare_y_at_xC2(const CGAL_Filtered_exact<CT,ET> &l1a,
	const CGAL_Filtered_exact<CT,ET> &l1b,
	const CGAL_Filtered_exact<CT,ET> &l1c,
	                      const CGAL_Filtered_exact<CT,ET> &l2a,
	const CGAL_Filtered_exact<CT,ET> &l2b,
	const CGAL_Filtered_exact<CT,ET> &l2c,
	                      const CGAL_Filtered_exact<CT,ET> &h1a,
	const CGAL_Filtered_exact<CT,ET> &h1b,
	const CGAL_Filtered_exact<CT,ET> &h1c,
	                      const CGAL_Filtered_exact<CT,ET> &h2a,
	const CGAL_Filtered_exact<CT,ET> &h2b,
	const CGAL_Filtered_exact<CT,ET> &h2c)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_y_at_xC2(
		CGAL_convert_to<IA>(l1a.value),
		CGAL_convert_to<IA>(l1b.value),
		CGAL_convert_to<IA>(l1c.value),
		CGAL_convert_to<IA>(l2a.value),
		CGAL_convert_to<IA>(l2b.value),
		CGAL_convert_to<IA>(l2c.value),
		CGAL_convert_to<IA>(h1a.value),
		CGAL_convert_to<IA>(h1b.value),
		CGAL_convert_to<IA>(h1c.value),
		CGAL_convert_to<IA>(h2a.value),
		CGAL_convert_to<IA>(h2b.value),
		CGAL_convert_to<IA>(h2c.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_y_at_xC2(
		CGAL_convert_to<ET>(l1a.value),
		CGAL_convert_to<ET>(l1b.value),
		CGAL_convert_to<ET>(l1c.value),
		CGAL_convert_to<ET>(l2a.value),
		CGAL_convert_to<ET>(l2b.value),
		CGAL_convert_to<ET>(l2c.value),
		CGAL_convert_to<ET>(h1a.value),
		CGAL_convert_to<ET>(h1b.value),
		CGAL_convert_to<ET>(h1c.value),
		CGAL_convert_to<ET>(h2a.value),
		CGAL_convert_to<ET>(h2b.value),
		CGAL_convert_to<ET>(h2c.value));
  }
  return result;
}

template < class CT, class ET >
// inline
CGAL_Comparison_result
CGAL_compare_deltax_deltayC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &qx,
	                             const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &sy)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_deltax_deltayC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(sy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_deltax_deltayC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(sy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Comparison_result
// inline
CGAL_compare_lexicographically_xyC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                    const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_lexicographically_xyC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_lexicographically_xyC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_MEDIUM_INLINE
CGAL_Orientation
CGAL_orientationC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                   const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                   const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Orientation result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_orientationC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_orientationC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_collinear_are_ordered_along_lineC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                        const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                                        const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_ordered_along_lineC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_ordered_along_lineC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_collinear_are_strictly_ordered_along_lineC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                                 const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                                                 const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_strictly_ordered_along_lineC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_strictly_ordered_along_lineC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Oriented_side
CGAL_side_of_oriented_circleC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                               const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                               const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	                               const CGAL_Filtered_exact<CT,ET> &tx,
	const CGAL_Filtered_exact<CT,ET> &ty)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Oriented_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_oriented_circleC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(tx.value),
		CGAL_convert_to<IA>(ty.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_oriented_circleC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(tx.value),
		CGAL_convert_to<ET>(ty.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Bounded_side
CGAL_side_of_bounded_circleC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                              const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                              const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	                              const CGAL_Filtered_exact<CT,ET> &tx,
	const CGAL_Filtered_exact<CT,ET> &ty)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Bounded_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_bounded_circleC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(tx.value),
		CGAL_convert_to<IA>(ty.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_bounded_circleC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(tx.value),
		CGAL_convert_to<ET>(ty.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_dist_to_pointC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                         const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                         const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_dist_to_pointC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_dist_to_pointC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_dist_to_pointC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                                const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_dist_to_pointC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_dist_to_pointC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_dist_to_pointC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                 const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                                 const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_dist_to_pointC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_dist_to_pointC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_lineC2(const CGAL_Filtered_exact<CT,ET> &la,
	const CGAL_Filtered_exact<CT,ET> &lb,
	const CGAL_Filtered_exact<CT,ET> &lc,
	                               const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                               const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_lineC2(
		CGAL_convert_to<IA>(la.value),
		CGAL_convert_to<IA>(lb.value),
		CGAL_convert_to<IA>(lc.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_lineC2(
		CGAL_convert_to<ET>(la.value),
		CGAL_convert_to<ET>(lb.value),
		CGAL_convert_to<ET>(lc.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_signed_dist_to_lineC2(const CGAL_Filtered_exact<CT,ET> &la,
	const CGAL_Filtered_exact<CT,ET> &lb,
	const CGAL_Filtered_exact<CT,ET> &lc,
	                                      const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                      const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_lineC2(
		CGAL_convert_to<IA>(la.value),
		CGAL_convert_to<IA>(lb.value),
		CGAL_convert_to<IA>(lc.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_lineC2(
		CGAL_convert_to<ET>(la.value),
		CGAL_convert_to<ET>(lb.value),
		CGAL_convert_to<ET>(lc.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_signed_dist_to_lineC2(const CGAL_Filtered_exact<CT,ET> &la,
	const CGAL_Filtered_exact<CT,ET> &lb,
	const CGAL_Filtered_exact<CT,ET> &lc,
	                                       const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                       const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_lineC2(
		CGAL_convert_to<IA>(la.value),
		CGAL_convert_to<IA>(lb.value),
		CGAL_convert_to<IA>(lc.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_lineC2(
		CGAL_convert_to<ET>(la.value),
		CGAL_convert_to<ET>(lb.value),
		CGAL_convert_to<ET>(lc.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value));
  }
  return result;
}
template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_lineC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                               const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                               const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	                               const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_lineC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(sx.value),
		CGAL_convert_to<IA>(sy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_lineC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(sx.value),
		CGAL_convert_to<ET>(sy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_signed_dist_to_lineC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                      const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                                      const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	                                      const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_lineC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(sx.value),
		CGAL_convert_to<IA>(sy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_lineC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(sx.value),
		CGAL_convert_to<ET>(sy.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_signed_dist_to_lineC2(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	                                       const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	                                       const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	                                       const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_lineC2(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(sx.value),
		CGAL_convert_to<IA>(sy.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_lineC2(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(sx.value),
		CGAL_convert_to<ET>(sy.value));
  }
  return result;
}

#ifdef CGAL_FILTER_H
#include <CGAL/Filter/predicates_on_ftC2.h>
#endif


#endif  // CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC2_H
