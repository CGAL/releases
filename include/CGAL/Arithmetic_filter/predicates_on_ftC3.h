// ======================================================================
//
// Copyright (c) 1997 The CGAL Consortium
//
// This software and related documentation is part of the
// Computational Geometry Algorithms Library (CGAL).
//
// Every use of CGAL requires a license. Licenses come in three kinds:
//
// - For academic research and teaching purposes, permission to use and
//   copy the software and its documentation is hereby granted free of  
//   charge, provided that
//   (1) it is not a component of a commercial product, and
//   (2) this notice appears in all copies of the software and
//       related documentation.
// - Development licenses grant access to the source code of the library 
//   to develop programs. These programs may be sold to other parties as 
//   executable code. To obtain a development license, please contact
//   the CGAL Consortium (at cgal@cs.uu.nl).
// - Commercialization licenses grant access to the source code and the
//   right to sell development licenses. To obtain a commercialization 
//   license, please contact the CGAL Consortium (at cgal@cs.uu.nl).
//
// This software and documentation is provided "as-is" and without
// warranty of any kind. In no event shall the CGAL Consortium be
// liable for any damage of any kind.
//
// The CGAL Consortium consists of Utrecht University (The Netherlands),
// ETH Zurich (Switzerland), Free University of Berlin (Germany),
// INRIA Sophia-Antipolis (France), Martin-Luther-University Halle-Wittenberg
// (Germany) Max-Planck-Institute Saarbrucken (Germany), RISC Linz (Austria),
// and Tel-Aviv University (Israel).
//
// ----------------------------------------------------------------------
//
// release       : CGAL-1.2
// release_date  : 1999, January 18
//
// file          : include/CGAL/Arithmetic_filter/predicates_on_ftC3.h
// package       : Interval_arithmetic (2.7)
// source        : include/CGAL/predicates_on_ftC3.h
// revision      : $Revision: 1.3 $
// revision_date :
// author(s)     : Sylvain.Pion
//
// coordinator   : INRIA Sophia-Antipolis
//
//
// email         : cgal@cs.uu.nl
//
// ======================================================================


#ifndef CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC3_H
#define CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC3_H

// This file is automatically generated with the script for filtering
// predicates, using Interval arithmetic.

#include <CGAL/Interval_arithmetic.h>

#ifndef CGAL_DETERMINANT_H
#include <CGAL/determinant.h>
#endif // CGAL_DETERMINANT_H
#ifndef CGAL_BASIC_CONSTRUCTIONS_FTC3_H
#include <CGAL/basic_constructions_ftC3.h>
#endif // CGAL_BASIC_CONSTRUCTIONS_FTC3_H

template < class CT, class ET >
CGAL_Comparison_result
CGAL_compare_lexicographically_xyzC3(const CGAL_Filtered_exact<CT,ET> &x1,
	const CGAL_Filtered_exact<CT,ET> &y1,
	const CGAL_Filtered_exact<CT,ET> &z1,
	                                     const CGAL_Filtered_exact<CT,ET> &x2,
	const CGAL_Filtered_exact<CT,ET> &y2,
	const CGAL_Filtered_exact<CT,ET> &z2)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_compare_lexicographically_xyzC3(
		CGAL_convert_to<IA>(x1.value),
		CGAL_convert_to<IA>(y1.value),
		CGAL_convert_to<IA>(z1.value),
		CGAL_convert_to<IA>(x2.value),
		CGAL_convert_to<IA>(y2.value),
		CGAL_convert_to<IA>(z2.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_compare_lexicographically_xyzC3(
		CGAL_convert_to<ET>(x1.value),
		CGAL_convert_to<ET>(y1.value),
		CGAL_convert_to<ET>(z1.value),
		CGAL_convert_to<ET>(x2.value),
		CGAL_convert_to<ET>(y2.value),
		CGAL_convert_to<ET>(z2.value));
  }
  return result;
}

template < class CT, class ET >
bool
CGAL_collinearC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                 const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                 const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinearC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinearC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
CGAL_Orientation
CGAL_orientationC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                   const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                   const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz,
	                   const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy,
	const CGAL_Filtered_exact<CT,ET> &sz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Orientation result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_orientationC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value),
		CGAL_convert_to<IA>(sx.value),
		CGAL_convert_to<IA>(sy.value),
		CGAL_convert_to<IA>(sz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_orientationC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value),
		CGAL_convert_to<ET>(sx.value),
		CGAL_convert_to<ET>(sy.value),
		CGAL_convert_to<ET>(sz.value));
  }
  return result;
}

template < class CT, class ET >
bool
CGAL_collinear_are_ordered_along_lineC3(
     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	     const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_ordered_along_lineC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_ordered_along_lineC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
bool
CGAL_collinear_are_strictly_ordered_along_lineC3(
     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	     const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_collinear_are_strictly_ordered_along_lineC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_collinear_are_strictly_ordered_along_lineC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value));
  }
  return result;
}


template < class CT, class ET >
CGAL_Oriented_side
CGAL_side_of_oriented_sphereC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                               const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                               const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz,
	                               const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy,
	const CGAL_Filtered_exact<CT,ET> &sz,
	                               const CGAL_Filtered_exact<CT,ET> &tx,
	const CGAL_Filtered_exact<CT,ET> &ty,
	const CGAL_Filtered_exact<CT,ET> &tz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Oriented_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_oriented_sphereC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value),
		CGAL_convert_to<IA>(sx.value),
		CGAL_convert_to<IA>(sy.value),
		CGAL_convert_to<IA>(sz.value),
		CGAL_convert_to<IA>(tx.value),
		CGAL_convert_to<IA>(ty.value),
		CGAL_convert_to<IA>(tz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_oriented_sphereC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value),
		CGAL_convert_to<ET>(sx.value),
		CGAL_convert_to<ET>(sy.value),
		CGAL_convert_to<ET>(sz.value),
		CGAL_convert_to<ET>(tx.value),
		CGAL_convert_to<ET>(ty.value),
		CGAL_convert_to<ET>(tz.value));
  }
  return result;
}

template < class CT, class ET >
CGAL_Bounded_side
CGAL_side_of_bounded_sphereC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                              const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                              const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz,
	                              const CGAL_Filtered_exact<CT,ET> &sx,
	const CGAL_Filtered_exact<CT,ET> &sy,
	const CGAL_Filtered_exact<CT,ET> &sz,
	                              const CGAL_Filtered_exact<CT,ET> &tx,
	const CGAL_Filtered_exact<CT,ET> &ty,
	const CGAL_Filtered_exact<CT,ET> &tz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Bounded_side result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_side_of_bounded_sphereC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value),
		CGAL_convert_to<IA>(sx.value),
		CGAL_convert_to<IA>(sy.value),
		CGAL_convert_to<IA>(sz.value),
		CGAL_convert_to<IA>(tx.value),
		CGAL_convert_to<IA>(ty.value),
		CGAL_convert_to<IA>(tz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_side_of_bounded_sphereC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value),
		CGAL_convert_to<ET>(sx.value),
		CGAL_convert_to<ET>(sy.value),
		CGAL_convert_to<ET>(sz.value),
		CGAL_convert_to<ET>(tx.value),
		CGAL_convert_to<ET>(ty.value),
		CGAL_convert_to<ET>(tz.value));
  }
  return result;
}


template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_dist_to_pointC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                         const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                         const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_dist_to_pointC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_dist_to_pointC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_dist_to_pointC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                                const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                                const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_dist_to_pointC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_dist_to_pointC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_dist_to_pointC3(const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	                                 const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz,
	                                 const CGAL_Filtered_exact<CT,ET> &rx,
	const CGAL_Filtered_exact<CT,ET> &ry,
	const CGAL_Filtered_exact<CT,ET> &rz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_dist_to_pointC3(
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value),
		CGAL_convert_to<IA>(rx.value),
		CGAL_convert_to<IA>(ry.value),
		CGAL_convert_to<IA>(rz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_dist_to_pointC3(
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value),
		CGAL_convert_to<ET>(rx.value),
		CGAL_convert_to<ET>(ry.value),
		CGAL_convert_to<ET>(rz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &pa,
	const CGAL_Filtered_exact<CT,ET> &pb,
	const CGAL_Filtered_exact<CT,ET> &pc,
	const CGAL_Filtered_exact<CT,ET> &pd,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_planeC3(
		CGAL_convert_to<IA>(pa.value),
		CGAL_convert_to<IA>(pb.value),
		CGAL_convert_to<IA>(pc.value),
		CGAL_convert_to<IA>(pd.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_planeC3(
		CGAL_convert_to<ET>(pa.value),
		CGAL_convert_to<ET>(pb.value),
		CGAL_convert_to<ET>(pc.value),
		CGAL_convert_to<ET>(pd.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &pa,
	const CGAL_Filtered_exact<CT,ET> &pb,
	const CGAL_Filtered_exact<CT,ET> &pc,
	const CGAL_Filtered_exact<CT,ET> &pd,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_planeC3(
		CGAL_convert_to<IA>(pa.value),
		CGAL_convert_to<IA>(pb.value),
		CGAL_convert_to<IA>(pc.value),
		CGAL_convert_to<IA>(pd.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_planeC3(
		CGAL_convert_to<ET>(pa.value),
		CGAL_convert_to<ET>(pb.value),
		CGAL_convert_to<ET>(pc.value),
		CGAL_convert_to<ET>(pd.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &pa,
	const CGAL_Filtered_exact<CT,ET> &pb,
	const CGAL_Filtered_exact<CT,ET> &pc,
	const CGAL_Filtered_exact<CT,ET> &pd,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		CGAL_convert_to<IA>(pa.value),
		CGAL_convert_to<IA>(pb.value),
		CGAL_convert_to<IA>(pc.value),
		CGAL_convert_to<IA>(pd.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		CGAL_convert_to<ET>(pa.value),
		CGAL_convert_to<ET>(pb.value),
		CGAL_convert_to<ET>(pc.value),
		CGAL_convert_to<ET>(pd.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value));
  }
  return result;
}
template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
CGAL_Comparison_result
CGAL_cmp_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &ppx,
	const CGAL_Filtered_exact<CT,ET> &ppy,
	const CGAL_Filtered_exact<CT,ET> &ppz,
	     const CGAL_Filtered_exact<CT,ET> &pqx,
	const CGAL_Filtered_exact<CT,ET> &pqy,
	const CGAL_Filtered_exact<CT,ET> &pqz,
	     const CGAL_Filtered_exact<CT,ET> &prx,
	const CGAL_Filtered_exact<CT,ET> &pry,
	const CGAL_Filtered_exact<CT,ET> &prz,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  CGAL_Comparison_result result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_cmp_signed_dist_to_planeC3(
		CGAL_convert_to<IA>(ppx.value),
		CGAL_convert_to<IA>(ppy.value),
		CGAL_convert_to<IA>(ppz.value),
		CGAL_convert_to<IA>(pqx.value),
		CGAL_convert_to<IA>(pqy.value),
		CGAL_convert_to<IA>(pqz.value),
		CGAL_convert_to<IA>(prx.value),
		CGAL_convert_to<IA>(pry.value),
		CGAL_convert_to<IA>(prz.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_cmp_signed_dist_to_planeC3(
		CGAL_convert_to<ET>(ppx.value),
		CGAL_convert_to<ET>(ppy.value),
		CGAL_convert_to<ET>(ppz.value),
		CGAL_convert_to<ET>(pqx.value),
		CGAL_convert_to<ET>(pqy.value),
		CGAL_convert_to<ET>(pqz.value),
		CGAL_convert_to<ET>(prx.value),
		CGAL_convert_to<ET>(pry.value),
		CGAL_convert_to<ET>(prz.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_larger_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &ppx,
	const CGAL_Filtered_exact<CT,ET> &ppy,
	const CGAL_Filtered_exact<CT,ET> &ppz,
	     const CGAL_Filtered_exact<CT,ET> &pqx,
	const CGAL_Filtered_exact<CT,ET> &pqy,
	const CGAL_Filtered_exact<CT,ET> &pqz,
	     const CGAL_Filtered_exact<CT,ET> &prx,
	const CGAL_Filtered_exact<CT,ET> &pry,
	const CGAL_Filtered_exact<CT,ET> &prz,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_larger_signed_dist_to_planeC3(
		CGAL_convert_to<IA>(ppx.value),
		CGAL_convert_to<IA>(ppy.value),
		CGAL_convert_to<IA>(ppz.value),
		CGAL_convert_to<IA>(pqx.value),
		CGAL_convert_to<IA>(pqy.value),
		CGAL_convert_to<IA>(pqz.value),
		CGAL_convert_to<IA>(prx.value),
		CGAL_convert_to<IA>(pry.value),
		CGAL_convert_to<IA>(prz.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_larger_signed_dist_to_planeC3(
		CGAL_convert_to<ET>(ppx.value),
		CGAL_convert_to<ET>(ppy.value),
		CGAL_convert_to<ET>(ppz.value),
		CGAL_convert_to<ET>(pqx.value),
		CGAL_convert_to<ET>(pqy.value),
		CGAL_convert_to<ET>(pqz.value),
		CGAL_convert_to<ET>(prx.value),
		CGAL_convert_to<ET>(pry.value),
		CGAL_convert_to<ET>(prz.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value));
  }
  return result;
}

template < class CT, class ET >
// CGAL_KERNEL_LARGE_INLINE
bool
CGAL_has_smaller_signed_dist_to_planeC3(
     const CGAL_Filtered_exact<CT,ET> &ppx,
	const CGAL_Filtered_exact<CT,ET> &ppy,
	const CGAL_Filtered_exact<CT,ET> &ppz,
	     const CGAL_Filtered_exact<CT,ET> &pqx,
	const CGAL_Filtered_exact<CT,ET> &pqy,
	const CGAL_Filtered_exact<CT,ET> &pqz,
	     const CGAL_Filtered_exact<CT,ET> &prx,
	const CGAL_Filtered_exact<CT,ET> &pry,
	const CGAL_Filtered_exact<CT,ET> &prz,
	     const CGAL_Filtered_exact<CT,ET> &px,
	const CGAL_Filtered_exact<CT,ET> &py,
	const CGAL_Filtered_exact<CT,ET> &pz,
	     const CGAL_Filtered_exact<CT,ET> &qx,
	const CGAL_Filtered_exact<CT,ET> &qy,
	const CGAL_Filtered_exact<CT,ET> &qz)
{ // This is the default filter (specialisation).

  typedef CGAL_Interval_nt_advanced IA;

  bool result;
  CGAL_FPU_set_rounding_to_infinity();
  try
  {
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		CGAL_convert_to<IA>(ppx.value),
		CGAL_convert_to<IA>(ppy.value),
		CGAL_convert_to<IA>(ppz.value),
		CGAL_convert_to<IA>(pqx.value),
		CGAL_convert_to<IA>(pqy.value),
		CGAL_convert_to<IA>(pqz.value),
		CGAL_convert_to<IA>(prx.value),
		CGAL_convert_to<IA>(pry.value),
		CGAL_convert_to<IA>(prz.value),
		CGAL_convert_to<IA>(px.value),
		CGAL_convert_to<IA>(py.value),
		CGAL_convert_to<IA>(pz.value),
		CGAL_convert_to<IA>(qx.value),
		CGAL_convert_to<IA>(qy.value),
		CGAL_convert_to<IA>(qz.value));
    CGAL_FPU_set_rounding_to_nearest();
  } 
  catch (IA::unsafe_comparison)
  {
    CGAL_FPU_set_rounding_to_nearest();
    result = CGAL_has_smaller_signed_dist_to_planeC3(
		CGAL_convert_to<ET>(ppx.value),
		CGAL_convert_to<ET>(ppy.value),
		CGAL_convert_to<ET>(ppz.value),
		CGAL_convert_to<ET>(pqx.value),
		CGAL_convert_to<ET>(pqy.value),
		CGAL_convert_to<ET>(pqz.value),
		CGAL_convert_to<ET>(prx.value),
		CGAL_convert_to<ET>(pry.value),
		CGAL_convert_to<ET>(prz.value),
		CGAL_convert_to<ET>(px.value),
		CGAL_convert_to<ET>(py.value),
		CGAL_convert_to<ET>(pz.value),
		CGAL_convert_to<ET>(qx.value),
		CGAL_convert_to<ET>(qy.value),
		CGAL_convert_to<ET>(qz.value));
  }
  return result;
}

// Sylvain: you can uncomment this whenever you're ready
// #ifdef CGAL_FILTER_H
// #include <CGAL/Filter/predicates_on_ftC3.h>
// #endif


#endif // CGAL_ARITHMETIC_FILTER_PREDICATES_ON_FTC3_H
