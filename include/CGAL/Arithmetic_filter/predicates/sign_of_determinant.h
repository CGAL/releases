// ======================================================================
//
// Copyright (c) 1999,2000 The CGAL Consortium

// This software and related documentation is part of the Computational
// Geometry Algorithms Library (CGAL).
// This software and documentation is provided "as-is" and without warranty
// of any kind. In no event shall the CGAL Consortium be liable for any
// damage of any kind. 
//
// Every use of CGAL requires a license. 
//
// Academic research and teaching license
// - For academic research and teaching purposes, permission to use and copy
//   the software and its documentation is hereby granted free of charge,
//   provided that it is not a component of a commercial product, and this
//   notice appears in all copies of the software and related documentation. 
//
// Commercial licenses
// - A commercial license is available through Algorithmic Solutions, who also
//   markets LEDA (http://www.algorithmic-solutions.de). 
// - Commercial users may apply for an evaluation license by writing to
//   Algorithmic Solutions (contact@algorithmic-solutions.com). 
//
// The CGAL Consortium consists of Utrecht University (The Netherlands),
// ETH Zurich (Switzerland), Free University of Berlin (Germany),
// INRIA Sophia-Antipolis (France), Martin-Luther-University Halle-Wittenberg
// (Germany), Max-Planck-Institute Saarbrucken (Germany), RISC Linz (Austria),
// and Tel-Aviv University (Israel).
//
// ----------------------------------------------------------------------
// 
// release       : CGAL-2.2
// release_date  : 2000, September 30
// 
// file          : include/CGAL/Arithmetic_filter/predicates/sign_of_determinant.h
// package       : Interval_arithmetic (4.58)
// author(s)     : Sylvain Pion
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec>)
// email         : contact@cgal.org
// www           : http://www.cgal.org
//
// ======================================================================

// This file is automatically generated by
// scripts/filtered_predicates_generator.pl

#ifndef CGAL_ARITHMETIC_FILTER_PREDICATES_SIGN_OF_DETERMINANT_H
#define CGAL_ARITHMETIC_FILTER_PREDICATES_SIGN_OF_DETERMINANT_H

CGAL_BEGIN_NAMESPACE

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, bool CGAL_IA_PROTECTED,
           class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant2x2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a11)
{
  try
  {
    Protect_FPU_rounding<CGAL_IA_PROTECTED> Protection;
    return sign_of_determinant2x2(
		a00.interval(),
		a01.interval(),
		a10.interval(),
		a11.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    Protect_FPU_rounding<!CGAL_IA_PROTECTED> Protection(CGAL_FE_TONEAREST);
    return sign_of_determinant2x2(
		a00.exact(),
		a01.exact(),
		a10.exact(),
		a11.exact());
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_sign_of_determinant2x2_4
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Sign update_epsilon(
	const Static_filter_error &a00,
	const Static_filter_error &a01,
	const Static_filter_error &a10,
	const Static_filter_error &a11,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return
      static_cast<Sign>(static_cast<int>(CGAL_NTS Static_Filtered_compare_2::update_epsilon( a00*a11, a10*a01,
  		epsilon_0)));
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Sign epsilon_variant(
	const Restricted_double &a00,
	const Restricted_double &a01,
	const Restricted_double &a10,
	const Restricted_double &a11,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return
      static_cast<Sign>(static_cast<int>(CGAL_NTS Static_Filtered_compare_2::epsilon_variant( a00*a11, a10*a01,
  		epsilon_0)));
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant2x2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a11)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_sign_of_determinant2x2_4::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = max(NEW_bound, fabs(a00.to_double()));
    NEW_bound = max(NEW_bound, fabs(a01.to_double()));
    NEW_bound = max(NEW_bound, fabs(a10.to_double()));
    NEW_bound = max(NEW_bound, fabs(a11.to_double()));
    // Re-adjust the context.
    Static_Filtered_sign_of_determinant2x2_4::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a10.dbl(),
		a11.dbl(),
		Static_Filtered_sign_of_determinant2x2_4::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_sign_of_determinant2x2_4::number_of_failures++;
    return sign_of_determinant2x2(
		a00.exact(),
		a01.exact(),
		a10.exact(),
		a11.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant2x2(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a11)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_sign_of_determinant2x2_4::_bound; )
  CGAL_assertion(!(
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a10.dbl(),
		a11.dbl(),
		Static_Filtered_sign_of_determinant2x2_4::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_sign_of_determinant2x2_4::number_of_failures++;
    return sign_of_determinant2x2(
		a00.exact(),
		a01.exact(),
		a10.exact(),
		a11.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, bool CGAL_IA_PROTECTED,
           class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant3x3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a22)
{
  try
  {
    Protect_FPU_rounding<CGAL_IA_PROTECTED> Protection;
    return sign_of_determinant3x3(
		a00.interval(),
		a01.interval(),
		a02.interval(),
		a10.interval(),
		a11.interval(),
		a12.interval(),
		a20.interval(),
		a21.interval(),
		a22.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    Protect_FPU_rounding<!CGAL_IA_PROTECTED> Protection(CGAL_FE_TONEAREST);
    return sign_of_determinant3x3(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact());
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_sign_of_determinant3x3_9
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Sign update_epsilon(
	const Static_filter_error &a00,
	const Static_filter_error &a01,
	const Static_filter_error &a02,
	const Static_filter_error &a10,
	const Static_filter_error &a11,
	const Static_filter_error &a12,
	const Static_filter_error &a20,
	const Static_filter_error &a21,
	const Static_filter_error &a22,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return CGAL_NTS Static_Filtered_sign_1::update_epsilon(det3x3_by_formula(a00, a01, a02,
                                           a10, a11, a12,
                                           a20, a21, a22),
  		epsilon_0);
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Sign epsilon_variant(
	const Restricted_double &a00,
	const Restricted_double &a01,
	const Restricted_double &a02,
	const Restricted_double &a10,
	const Restricted_double &a11,
	const Restricted_double &a12,
	const Restricted_double &a20,
	const Restricted_double &a21,
	const Restricted_double &a22,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return CGAL_NTS Static_Filtered_sign_1::epsilon_variant(det3x3_by_formula(a00, a01, a02,
                                           a10, a11, a12,
                                           a20, a21, a22),
  		epsilon_0);
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant3x3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a22)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_sign_of_determinant3x3_9::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a02.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound ||
	fabs(a12.to_double()) > SAF_bound ||
	fabs(a20.to_double()) > SAF_bound ||
	fabs(a21.to_double()) > SAF_bound ||
	fabs(a22.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = max(NEW_bound, fabs(a00.to_double()));
    NEW_bound = max(NEW_bound, fabs(a01.to_double()));
    NEW_bound = max(NEW_bound, fabs(a02.to_double()));
    NEW_bound = max(NEW_bound, fabs(a10.to_double()));
    NEW_bound = max(NEW_bound, fabs(a11.to_double()));
    NEW_bound = max(NEW_bound, fabs(a12.to_double()));
    NEW_bound = max(NEW_bound, fabs(a20.to_double()));
    NEW_bound = max(NEW_bound, fabs(a21.to_double()));
    NEW_bound = max(NEW_bound, fabs(a22.to_double()));
    // Re-adjust the context.
    Static_Filtered_sign_of_determinant3x3_9::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_sign_of_determinant3x3_9::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a02.dbl(),
		a10.dbl(),
		a11.dbl(),
		a12.dbl(),
		a20.dbl(),
		a21.dbl(),
		a22.dbl(),
		Static_Filtered_sign_of_determinant3x3_9::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_sign_of_determinant3x3_9::number_of_failures++;
    return sign_of_determinant3x3(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant3x3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a22)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_sign_of_determinant3x3_9::_bound; )
  CGAL_assertion(!(
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a02.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound ||
	fabs(a12.to_double()) > SAF_bound ||
	fabs(a20.to_double()) > SAF_bound ||
	fabs(a21.to_double()) > SAF_bound ||
	fabs(a22.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_sign_of_determinant3x3_9::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a02.dbl(),
		a10.dbl(),
		a11.dbl(),
		a12.dbl(),
		a20.dbl(),
		a21.dbl(),
		a22.dbl(),
		Static_Filtered_sign_of_determinant3x3_9::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_sign_of_determinant3x3_9::number_of_failures++;
    return sign_of_determinant3x3(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, bool CGAL_IA_PROTECTED,
           class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant4x4(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a33)
{
  try
  {
    Protect_FPU_rounding<CGAL_IA_PROTECTED> Protection;
    return sign_of_determinant4x4(
		a00.interval(),
		a01.interval(),
		a02.interval(),
		a03.interval(),
		a10.interval(),
		a11.interval(),
		a12.interval(),
		a13.interval(),
		a20.interval(),
		a21.interval(),
		a22.interval(),
		a23.interval(),
		a30.interval(),
		a31.interval(),
		a32.interval(),
		a33.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    Protect_FPU_rounding<!CGAL_IA_PROTECTED> Protection(CGAL_FE_TONEAREST);
    return sign_of_determinant4x4(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact());
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_sign_of_determinant4x4_16
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Sign update_epsilon(
	const Static_filter_error &a00,
	const Static_filter_error &a01,
	const Static_filter_error &a02,
	const Static_filter_error &a03,
	const Static_filter_error &a10,
	const Static_filter_error &a11,
	const Static_filter_error &a12,
	const Static_filter_error &a13,
	const Static_filter_error &a20,
	const Static_filter_error &a21,
	const Static_filter_error &a22,
	const Static_filter_error &a23,
	const Static_filter_error &a30,
	const Static_filter_error &a31,
	const Static_filter_error &a32,
	const Static_filter_error &a33,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return CGAL_NTS Static_Filtered_sign_1::update_epsilon(det4x4_by_formula(a00, a01, a02, a03,
                                           a10, a11, a12, a13,
                                           a20, a21, a22, a23,
                                           a30, a31, a32, a33),
  		epsilon_0);
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Sign epsilon_variant(
	const Restricted_double &a00,
	const Restricted_double &a01,
	const Restricted_double &a02,
	const Restricted_double &a03,
	const Restricted_double &a10,
	const Restricted_double &a11,
	const Restricted_double &a12,
	const Restricted_double &a13,
	const Restricted_double &a20,
	const Restricted_double &a21,
	const Restricted_double &a22,
	const Restricted_double &a23,
	const Restricted_double &a30,
	const Restricted_double &a31,
	const Restricted_double &a32,
	const Restricted_double &a33,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return CGAL_NTS Static_Filtered_sign_1::epsilon_variant(det4x4_by_formula(a00, a01, a02, a03,
                                           a10, a11, a12, a13,
                                           a20, a21, a22, a23,
                                           a30, a31, a32, a33),
  		epsilon_0);
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant4x4(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a33)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_sign_of_determinant4x4_16::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a02.to_double()) > SAF_bound ||
	fabs(a03.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound ||
	fabs(a12.to_double()) > SAF_bound ||
	fabs(a13.to_double()) > SAF_bound ||
	fabs(a20.to_double()) > SAF_bound ||
	fabs(a21.to_double()) > SAF_bound ||
	fabs(a22.to_double()) > SAF_bound ||
	fabs(a23.to_double()) > SAF_bound ||
	fabs(a30.to_double()) > SAF_bound ||
	fabs(a31.to_double()) > SAF_bound ||
	fabs(a32.to_double()) > SAF_bound ||
	fabs(a33.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = max(NEW_bound, fabs(a00.to_double()));
    NEW_bound = max(NEW_bound, fabs(a01.to_double()));
    NEW_bound = max(NEW_bound, fabs(a02.to_double()));
    NEW_bound = max(NEW_bound, fabs(a03.to_double()));
    NEW_bound = max(NEW_bound, fabs(a10.to_double()));
    NEW_bound = max(NEW_bound, fabs(a11.to_double()));
    NEW_bound = max(NEW_bound, fabs(a12.to_double()));
    NEW_bound = max(NEW_bound, fabs(a13.to_double()));
    NEW_bound = max(NEW_bound, fabs(a20.to_double()));
    NEW_bound = max(NEW_bound, fabs(a21.to_double()));
    NEW_bound = max(NEW_bound, fabs(a22.to_double()));
    NEW_bound = max(NEW_bound, fabs(a23.to_double()));
    NEW_bound = max(NEW_bound, fabs(a30.to_double()));
    NEW_bound = max(NEW_bound, fabs(a31.to_double()));
    NEW_bound = max(NEW_bound, fabs(a32.to_double()));
    NEW_bound = max(NEW_bound, fabs(a33.to_double()));
    // Re-adjust the context.
    Static_Filtered_sign_of_determinant4x4_16::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_sign_of_determinant4x4_16::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a02.dbl(),
		a03.dbl(),
		a10.dbl(),
		a11.dbl(),
		a12.dbl(),
		a13.dbl(),
		a20.dbl(),
		a21.dbl(),
		a22.dbl(),
		a23.dbl(),
		a30.dbl(),
		a31.dbl(),
		a32.dbl(),
		a33.dbl(),
		Static_Filtered_sign_of_determinant4x4_16::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_sign_of_determinant4x4_16::number_of_failures++;
    return sign_of_determinant4x4(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* inline */
Sign
sign_of_determinant4x4(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a33)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_sign_of_determinant4x4_16::_bound; )
  CGAL_assertion(!(
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a02.to_double()) > SAF_bound ||
	fabs(a03.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound ||
	fabs(a12.to_double()) > SAF_bound ||
	fabs(a13.to_double()) > SAF_bound ||
	fabs(a20.to_double()) > SAF_bound ||
	fabs(a21.to_double()) > SAF_bound ||
	fabs(a22.to_double()) > SAF_bound ||
	fabs(a23.to_double()) > SAF_bound ||
	fabs(a30.to_double()) > SAF_bound ||
	fabs(a31.to_double()) > SAF_bound ||
	fabs(a32.to_double()) > SAF_bound ||
	fabs(a33.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_sign_of_determinant4x4_16::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a02.dbl(),
		a03.dbl(),
		a10.dbl(),
		a11.dbl(),
		a12.dbl(),
		a13.dbl(),
		a20.dbl(),
		a21.dbl(),
		a22.dbl(),
		a23.dbl(),
		a30.dbl(),
		a31.dbl(),
		a32.dbl(),
		a33.dbl(),
		Static_Filtered_sign_of_determinant4x4_16::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_sign_of_determinant4x4_16::number_of_failures++;
    return sign_of_determinant4x4(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, bool CGAL_IA_PROTECTED,
           class CGAL_IA_CACHE >
#else
static
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Sign
sign_of_determinant5x5(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a04,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a14,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a24,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a33,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a34,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a40,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a41,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a42,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a43,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a44)
{
  try
  {
    Protect_FPU_rounding<CGAL_IA_PROTECTED> Protection;
    return sign_of_determinant5x5(
		a00.interval(),
		a01.interval(),
		a02.interval(),
		a03.interval(),
		a04.interval(),
		a10.interval(),
		a11.interval(),
		a12.interval(),
		a13.interval(),
		a14.interval(),
		a20.interval(),
		a21.interval(),
		a22.interval(),
		a23.interval(),
		a24.interval(),
		a30.interval(),
		a31.interval(),
		a32.interval(),
		a33.interval(),
		a34.interval(),
		a40.interval(),
		a41.interval(),
		a42.interval(),
		a43.interval(),
		a44.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    Protect_FPU_rounding<!CGAL_IA_PROTECTED> Protection(CGAL_FE_TONEAREST);
    return sign_of_determinant5x5(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a04.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a14.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a24.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact(),
		a34.exact(),
		a40.exact(),
		a41.exact(),
		a42.exact(),
		a43.exact(),
		a44.exact());
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_sign_of_determinant5x5_25
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Sign update_epsilon(
	const Static_filter_error &a00,
	const Static_filter_error &a01,
	const Static_filter_error &a02,
	const Static_filter_error &a03,
	const Static_filter_error &a04,
	const Static_filter_error &a10,
	const Static_filter_error &a11,
	const Static_filter_error &a12,
	const Static_filter_error &a13,
	const Static_filter_error &a14,
	const Static_filter_error &a20,
	const Static_filter_error &a21,
	const Static_filter_error &a22,
	const Static_filter_error &a23,
	const Static_filter_error &a24,
	const Static_filter_error &a30,
	const Static_filter_error &a31,
	const Static_filter_error &a32,
	const Static_filter_error &a33,
	const Static_filter_error &a34,
	const Static_filter_error &a40,
	const Static_filter_error &a41,
	const Static_filter_error &a42,
	const Static_filter_error &a43,
	const Static_filter_error &a44,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return CGAL_NTS Static_Filtered_sign_1::update_epsilon(det5x5_by_formula(a00, a01, a02, a03, a04,
                                           a10, a11, a12, a13, a14,
                                           a20, a21, a22, a23, a24,
                                           a30, a31, a32, a33, a34,
                                           a40, a41, a42, a43, a44),
  		epsilon_0);
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Sign epsilon_variant(
	const Restricted_double &a00,
	const Restricted_double &a01,
	const Restricted_double &a02,
	const Restricted_double &a03,
	const Restricted_double &a04,
	const Restricted_double &a10,
	const Restricted_double &a11,
	const Restricted_double &a12,
	const Restricted_double &a13,
	const Restricted_double &a14,
	const Restricted_double &a20,
	const Restricted_double &a21,
	const Restricted_double &a22,
	const Restricted_double &a23,
	const Restricted_double &a24,
	const Restricted_double &a30,
	const Restricted_double &a31,
	const Restricted_double &a32,
	const Restricted_double &a33,
	const Restricted_double &a34,
	const Restricted_double &a40,
	const Restricted_double &a41,
	const Restricted_double &a42,
	const Restricted_double &a43,
	const Restricted_double &a44,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return CGAL_NTS Static_Filtered_sign_1::epsilon_variant(det5x5_by_formula(a00, a01, a02, a03, a04,
                                           a10, a11, a12, a13, a14,
                                           a20, a21, a22, a23, a24,
                                           a30, a31, a32, a33, a34,
                                           a40, a41, a42, a43, a44),
  		epsilon_0);
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Sign
sign_of_determinant5x5(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a04,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a14,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a24,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a33,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a34,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a40,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a41,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a42,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a43,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a44)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_sign_of_determinant5x5_25::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a02.to_double()) > SAF_bound ||
	fabs(a03.to_double()) > SAF_bound ||
	fabs(a04.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound ||
	fabs(a12.to_double()) > SAF_bound ||
	fabs(a13.to_double()) > SAF_bound ||
	fabs(a14.to_double()) > SAF_bound ||
	fabs(a20.to_double()) > SAF_bound ||
	fabs(a21.to_double()) > SAF_bound ||
	fabs(a22.to_double()) > SAF_bound ||
	fabs(a23.to_double()) > SAF_bound ||
	fabs(a24.to_double()) > SAF_bound ||
	fabs(a30.to_double()) > SAF_bound ||
	fabs(a31.to_double()) > SAF_bound ||
	fabs(a32.to_double()) > SAF_bound ||
	fabs(a33.to_double()) > SAF_bound ||
	fabs(a34.to_double()) > SAF_bound ||
	fabs(a40.to_double()) > SAF_bound ||
	fabs(a41.to_double()) > SAF_bound ||
	fabs(a42.to_double()) > SAF_bound ||
	fabs(a43.to_double()) > SAF_bound ||
	fabs(a44.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = max(NEW_bound, fabs(a00.to_double()));
    NEW_bound = max(NEW_bound, fabs(a01.to_double()));
    NEW_bound = max(NEW_bound, fabs(a02.to_double()));
    NEW_bound = max(NEW_bound, fabs(a03.to_double()));
    NEW_bound = max(NEW_bound, fabs(a04.to_double()));
    NEW_bound = max(NEW_bound, fabs(a10.to_double()));
    NEW_bound = max(NEW_bound, fabs(a11.to_double()));
    NEW_bound = max(NEW_bound, fabs(a12.to_double()));
    NEW_bound = max(NEW_bound, fabs(a13.to_double()));
    NEW_bound = max(NEW_bound, fabs(a14.to_double()));
    NEW_bound = max(NEW_bound, fabs(a20.to_double()));
    NEW_bound = max(NEW_bound, fabs(a21.to_double()));
    NEW_bound = max(NEW_bound, fabs(a22.to_double()));
    NEW_bound = max(NEW_bound, fabs(a23.to_double()));
    NEW_bound = max(NEW_bound, fabs(a24.to_double()));
    NEW_bound = max(NEW_bound, fabs(a30.to_double()));
    NEW_bound = max(NEW_bound, fabs(a31.to_double()));
    NEW_bound = max(NEW_bound, fabs(a32.to_double()));
    NEW_bound = max(NEW_bound, fabs(a33.to_double()));
    NEW_bound = max(NEW_bound, fabs(a34.to_double()));
    NEW_bound = max(NEW_bound, fabs(a40.to_double()));
    NEW_bound = max(NEW_bound, fabs(a41.to_double()));
    NEW_bound = max(NEW_bound, fabs(a42.to_double()));
    NEW_bound = max(NEW_bound, fabs(a43.to_double()));
    NEW_bound = max(NEW_bound, fabs(a44.to_double()));
    // Re-adjust the context.
    Static_Filtered_sign_of_determinant5x5_25::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_sign_of_determinant5x5_25::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a02.dbl(),
		a03.dbl(),
		a04.dbl(),
		a10.dbl(),
		a11.dbl(),
		a12.dbl(),
		a13.dbl(),
		a14.dbl(),
		a20.dbl(),
		a21.dbl(),
		a22.dbl(),
		a23.dbl(),
		a24.dbl(),
		a30.dbl(),
		a31.dbl(),
		a32.dbl(),
		a33.dbl(),
		a34.dbl(),
		a40.dbl(),
		a41.dbl(),
		a42.dbl(),
		a43.dbl(),
		a44.dbl(),
		Static_Filtered_sign_of_determinant5x5_25::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_sign_of_determinant5x5_25::number_of_failures++;
    return sign_of_determinant5x5(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a04.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a14.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a24.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact(),
		a34.exact(),
		a40.exact(),
		a41.exact(),
		a42.exact(),
		a43.exact(),
		a44.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Sign
sign_of_determinant5x5(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a04,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a14,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a24,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a33,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a34,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a40,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a41,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a42,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a43,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a44)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_sign_of_determinant5x5_25::_bound; )
  CGAL_assertion(!(
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a02.to_double()) > SAF_bound ||
	fabs(a03.to_double()) > SAF_bound ||
	fabs(a04.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound ||
	fabs(a12.to_double()) > SAF_bound ||
	fabs(a13.to_double()) > SAF_bound ||
	fabs(a14.to_double()) > SAF_bound ||
	fabs(a20.to_double()) > SAF_bound ||
	fabs(a21.to_double()) > SAF_bound ||
	fabs(a22.to_double()) > SAF_bound ||
	fabs(a23.to_double()) > SAF_bound ||
	fabs(a24.to_double()) > SAF_bound ||
	fabs(a30.to_double()) > SAF_bound ||
	fabs(a31.to_double()) > SAF_bound ||
	fabs(a32.to_double()) > SAF_bound ||
	fabs(a33.to_double()) > SAF_bound ||
	fabs(a34.to_double()) > SAF_bound ||
	fabs(a40.to_double()) > SAF_bound ||
	fabs(a41.to_double()) > SAF_bound ||
	fabs(a42.to_double()) > SAF_bound ||
	fabs(a43.to_double()) > SAF_bound ||
	fabs(a44.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_sign_of_determinant5x5_25::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a02.dbl(),
		a03.dbl(),
		a04.dbl(),
		a10.dbl(),
		a11.dbl(),
		a12.dbl(),
		a13.dbl(),
		a14.dbl(),
		a20.dbl(),
		a21.dbl(),
		a22.dbl(),
		a23.dbl(),
		a24.dbl(),
		a30.dbl(),
		a31.dbl(),
		a32.dbl(),
		a33.dbl(),
		a34.dbl(),
		a40.dbl(),
		a41.dbl(),
		a42.dbl(),
		a43.dbl(),
		a44.dbl(),
		Static_Filtered_sign_of_determinant5x5_25::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_sign_of_determinant5x5_25::number_of_failures++;
    return sign_of_determinant5x5(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a04.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a14.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a24.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact(),
		a34.exact(),
		a40.exact(),
		a41.exact(),
		a42.exact(),
		a43.exact(),
		a44.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, bool CGAL_IA_PROTECTED,
           class CGAL_IA_CACHE >
#else
static
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Sign
sign_of_determinant6x6(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a04,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a05,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a14,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a15,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a24,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a25,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a33,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a34,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a35,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a40,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a41,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a42,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a43,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a44,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a45,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a50,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a51,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a52,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a53,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a54,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, CGAL_IA_PROTECTED, CGAL_IA_CACHE> &a55)
{
  try
  {
    Protect_FPU_rounding<CGAL_IA_PROTECTED> Protection;
    return sign_of_determinant6x6(
		a00.interval(),
		a01.interval(),
		a02.interval(),
		a03.interval(),
		a04.interval(),
		a05.interval(),
		a10.interval(),
		a11.interval(),
		a12.interval(),
		a13.interval(),
		a14.interval(),
		a15.interval(),
		a20.interval(),
		a21.interval(),
		a22.interval(),
		a23.interval(),
		a24.interval(),
		a25.interval(),
		a30.interval(),
		a31.interval(),
		a32.interval(),
		a33.interval(),
		a34.interval(),
		a35.interval(),
		a40.interval(),
		a41.interval(),
		a42.interval(),
		a43.interval(),
		a44.interval(),
		a45.interval(),
		a50.interval(),
		a51.interval(),
		a52.interval(),
		a53.interval(),
		a54.interval(),
		a55.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    Protect_FPU_rounding<!CGAL_IA_PROTECTED> Protection(CGAL_FE_TONEAREST);
    return sign_of_determinant6x6(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a04.exact(),
		a05.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a14.exact(),
		a15.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a24.exact(),
		a25.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact(),
		a34.exact(),
		a35.exact(),
		a40.exact(),
		a41.exact(),
		a42.exact(),
		a43.exact(),
		a44.exact(),
		a45.exact(),
		a50.exact(),
		a51.exact(),
		a52.exact(),
		a53.exact(),
		a54.exact(),
		a55.exact());
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_sign_of_determinant6x6_36
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Sign update_epsilon(
	const Static_filter_error &a00,
	const Static_filter_error &a01,
	const Static_filter_error &a02,
	const Static_filter_error &a03,
	const Static_filter_error &a04,
	const Static_filter_error &a05,
	const Static_filter_error &a10,
	const Static_filter_error &a11,
	const Static_filter_error &a12,
	const Static_filter_error &a13,
	const Static_filter_error &a14,
	const Static_filter_error &a15,
	const Static_filter_error &a20,
	const Static_filter_error &a21,
	const Static_filter_error &a22,
	const Static_filter_error &a23,
	const Static_filter_error &a24,
	const Static_filter_error &a25,
	const Static_filter_error &a30,
	const Static_filter_error &a31,
	const Static_filter_error &a32,
	const Static_filter_error &a33,
	const Static_filter_error &a34,
	const Static_filter_error &a35,
	const Static_filter_error &a40,
	const Static_filter_error &a41,
	const Static_filter_error &a42,
	const Static_filter_error &a43,
	const Static_filter_error &a44,
	const Static_filter_error &a45,
	const Static_filter_error &a50,
	const Static_filter_error &a51,
	const Static_filter_error &a52,
	const Static_filter_error &a53,
	const Static_filter_error &a54,
	const Static_filter_error &a55,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return CGAL_NTS Static_Filtered_sign_1::update_epsilon(det6x6_by_formula(a00, a01, a02, a03, a04, a05,
                                           a10, a11, a12, a13, a14, a15,
                                           a20, a21, a22, a23, a24, a25,
                                           a30, a31, a32, a33, a34, a35,
                                           a40, a41, a42, a43, a44, a45,
                                           a50, a51, a52, a53, a54, a55),
  		epsilon_0);
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Sign epsilon_variant(
	const Restricted_double &a00,
	const Restricted_double &a01,
	const Restricted_double &a02,
	const Restricted_double &a03,
	const Restricted_double &a04,
	const Restricted_double &a05,
	const Restricted_double &a10,
	const Restricted_double &a11,
	const Restricted_double &a12,
	const Restricted_double &a13,
	const Restricted_double &a14,
	const Restricted_double &a15,
	const Restricted_double &a20,
	const Restricted_double &a21,
	const Restricted_double &a22,
	const Restricted_double &a23,
	const Restricted_double &a24,
	const Restricted_double &a25,
	const Restricted_double &a30,
	const Restricted_double &a31,
	const Restricted_double &a32,
	const Restricted_double &a33,
	const Restricted_double &a34,
	const Restricted_double &a35,
	const Restricted_double &a40,
	const Restricted_double &a41,
	const Restricted_double &a42,
	const Restricted_double &a43,
	const Restricted_double &a44,
	const Restricted_double &a45,
	const Restricted_double &a50,
	const Restricted_double &a51,
	const Restricted_double &a52,
	const Restricted_double &a53,
	const Restricted_double &a54,
	const Restricted_double &a55,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return CGAL_NTS Static_Filtered_sign_1::epsilon_variant(det6x6_by_formula(a00, a01, a02, a03, a04, a05,
                                           a10, a11, a12, a13, a14, a15,
                                           a20, a21, a22, a23, a24, a25,
                                           a30, a31, a32, a33, a34, a35,
                                           a40, a41, a42, a43, a44, a45,
                                           a50, a51, a52, a53, a54, a55),
  		epsilon_0);
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Sign
sign_of_determinant6x6(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a04,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a05,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a14,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a15,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a24,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a25,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a33,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a34,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a35,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a40,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a41,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a42,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a43,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a44,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a45,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a50,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a51,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a52,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a53,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a54,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, true, CGAL_IA_CACHE> &a55)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_sign_of_determinant6x6_36::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a02.to_double()) > SAF_bound ||
	fabs(a03.to_double()) > SAF_bound ||
	fabs(a04.to_double()) > SAF_bound ||
	fabs(a05.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound ||
	fabs(a12.to_double()) > SAF_bound ||
	fabs(a13.to_double()) > SAF_bound ||
	fabs(a14.to_double()) > SAF_bound ||
	fabs(a15.to_double()) > SAF_bound ||
	fabs(a20.to_double()) > SAF_bound ||
	fabs(a21.to_double()) > SAF_bound ||
	fabs(a22.to_double()) > SAF_bound ||
	fabs(a23.to_double()) > SAF_bound ||
	fabs(a24.to_double()) > SAF_bound ||
	fabs(a25.to_double()) > SAF_bound ||
	fabs(a30.to_double()) > SAF_bound ||
	fabs(a31.to_double()) > SAF_bound ||
	fabs(a32.to_double()) > SAF_bound ||
	fabs(a33.to_double()) > SAF_bound ||
	fabs(a34.to_double()) > SAF_bound ||
	fabs(a35.to_double()) > SAF_bound ||
	fabs(a40.to_double()) > SAF_bound ||
	fabs(a41.to_double()) > SAF_bound ||
	fabs(a42.to_double()) > SAF_bound ||
	fabs(a43.to_double()) > SAF_bound ||
	fabs(a44.to_double()) > SAF_bound ||
	fabs(a45.to_double()) > SAF_bound ||
	fabs(a50.to_double()) > SAF_bound ||
	fabs(a51.to_double()) > SAF_bound ||
	fabs(a52.to_double()) > SAF_bound ||
	fabs(a53.to_double()) > SAF_bound ||
	fabs(a54.to_double()) > SAF_bound ||
	fabs(a55.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = max(NEW_bound, fabs(a00.to_double()));
    NEW_bound = max(NEW_bound, fabs(a01.to_double()));
    NEW_bound = max(NEW_bound, fabs(a02.to_double()));
    NEW_bound = max(NEW_bound, fabs(a03.to_double()));
    NEW_bound = max(NEW_bound, fabs(a04.to_double()));
    NEW_bound = max(NEW_bound, fabs(a05.to_double()));
    NEW_bound = max(NEW_bound, fabs(a10.to_double()));
    NEW_bound = max(NEW_bound, fabs(a11.to_double()));
    NEW_bound = max(NEW_bound, fabs(a12.to_double()));
    NEW_bound = max(NEW_bound, fabs(a13.to_double()));
    NEW_bound = max(NEW_bound, fabs(a14.to_double()));
    NEW_bound = max(NEW_bound, fabs(a15.to_double()));
    NEW_bound = max(NEW_bound, fabs(a20.to_double()));
    NEW_bound = max(NEW_bound, fabs(a21.to_double()));
    NEW_bound = max(NEW_bound, fabs(a22.to_double()));
    NEW_bound = max(NEW_bound, fabs(a23.to_double()));
    NEW_bound = max(NEW_bound, fabs(a24.to_double()));
    NEW_bound = max(NEW_bound, fabs(a25.to_double()));
    NEW_bound = max(NEW_bound, fabs(a30.to_double()));
    NEW_bound = max(NEW_bound, fabs(a31.to_double()));
    NEW_bound = max(NEW_bound, fabs(a32.to_double()));
    NEW_bound = max(NEW_bound, fabs(a33.to_double()));
    NEW_bound = max(NEW_bound, fabs(a34.to_double()));
    NEW_bound = max(NEW_bound, fabs(a35.to_double()));
    NEW_bound = max(NEW_bound, fabs(a40.to_double()));
    NEW_bound = max(NEW_bound, fabs(a41.to_double()));
    NEW_bound = max(NEW_bound, fabs(a42.to_double()));
    NEW_bound = max(NEW_bound, fabs(a43.to_double()));
    NEW_bound = max(NEW_bound, fabs(a44.to_double()));
    NEW_bound = max(NEW_bound, fabs(a45.to_double()));
    NEW_bound = max(NEW_bound, fabs(a50.to_double()));
    NEW_bound = max(NEW_bound, fabs(a51.to_double()));
    NEW_bound = max(NEW_bound, fabs(a52.to_double()));
    NEW_bound = max(NEW_bound, fabs(a53.to_double()));
    NEW_bound = max(NEW_bound, fabs(a54.to_double()));
    NEW_bound = max(NEW_bound, fabs(a55.to_double()));
    // Re-adjust the context.
    Static_Filtered_sign_of_determinant6x6_36::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_sign_of_determinant6x6_36::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a02.dbl(),
		a03.dbl(),
		a04.dbl(),
		a05.dbl(),
		a10.dbl(),
		a11.dbl(),
		a12.dbl(),
		a13.dbl(),
		a14.dbl(),
		a15.dbl(),
		a20.dbl(),
		a21.dbl(),
		a22.dbl(),
		a23.dbl(),
		a24.dbl(),
		a25.dbl(),
		a30.dbl(),
		a31.dbl(),
		a32.dbl(),
		a33.dbl(),
		a34.dbl(),
		a35.dbl(),
		a40.dbl(),
		a41.dbl(),
		a42.dbl(),
		a43.dbl(),
		a44.dbl(),
		a45.dbl(),
		a50.dbl(),
		a51.dbl(),
		a52.dbl(),
		a53.dbl(),
		a54.dbl(),
		a55.dbl(),
		Static_Filtered_sign_of_determinant6x6_36::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_sign_of_determinant6x6_36::number_of_failures++;
    return sign_of_determinant6x6(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a04.exact(),
		a05.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a14.exact(),
		a15.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a24.exact(),
		a25.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact(),
		a34.exact(),
		a35.exact(),
		a40.exact(),
		a41.exact(),
		a42.exact(),
		a43.exact(),
		a44.exact(),
		a45.exact(),
		a50.exact(),
		a51.exact(),
		a52.exact(),
		a53.exact(),
		a54.exact(),
		a55.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
static
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Sign
sign_of_determinant6x6(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a00,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a01,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a02,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a03,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a04,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a05,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a10,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a11,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a12,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a13,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a14,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a15,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a20,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a21,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a22,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a23,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a24,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a25,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a30,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a31,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a32,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a33,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a34,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a35,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a40,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a41,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a42,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a43,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a44,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a45,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a50,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a51,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a52,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a53,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a54,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, false, CGAL_IA_CACHE> &a55)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_sign_of_determinant6x6_36::_bound; )
  CGAL_assertion(!(
	fabs(a00.to_double()) > SAF_bound ||
	fabs(a01.to_double()) > SAF_bound ||
	fabs(a02.to_double()) > SAF_bound ||
	fabs(a03.to_double()) > SAF_bound ||
	fabs(a04.to_double()) > SAF_bound ||
	fabs(a05.to_double()) > SAF_bound ||
	fabs(a10.to_double()) > SAF_bound ||
	fabs(a11.to_double()) > SAF_bound ||
	fabs(a12.to_double()) > SAF_bound ||
	fabs(a13.to_double()) > SAF_bound ||
	fabs(a14.to_double()) > SAF_bound ||
	fabs(a15.to_double()) > SAF_bound ||
	fabs(a20.to_double()) > SAF_bound ||
	fabs(a21.to_double()) > SAF_bound ||
	fabs(a22.to_double()) > SAF_bound ||
	fabs(a23.to_double()) > SAF_bound ||
	fabs(a24.to_double()) > SAF_bound ||
	fabs(a25.to_double()) > SAF_bound ||
	fabs(a30.to_double()) > SAF_bound ||
	fabs(a31.to_double()) > SAF_bound ||
	fabs(a32.to_double()) > SAF_bound ||
	fabs(a33.to_double()) > SAF_bound ||
	fabs(a34.to_double()) > SAF_bound ||
	fabs(a35.to_double()) > SAF_bound ||
	fabs(a40.to_double()) > SAF_bound ||
	fabs(a41.to_double()) > SAF_bound ||
	fabs(a42.to_double()) > SAF_bound ||
	fabs(a43.to_double()) > SAF_bound ||
	fabs(a44.to_double()) > SAF_bound ||
	fabs(a45.to_double()) > SAF_bound ||
	fabs(a50.to_double()) > SAF_bound ||
	fabs(a51.to_double()) > SAF_bound ||
	fabs(a52.to_double()) > SAF_bound ||
	fabs(a53.to_double()) > SAF_bound ||
	fabs(a54.to_double()) > SAF_bound ||
	fabs(a55.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_sign_of_determinant6x6_36::epsilon_variant(
		a00.dbl(),
		a01.dbl(),
		a02.dbl(),
		a03.dbl(),
		a04.dbl(),
		a05.dbl(),
		a10.dbl(),
		a11.dbl(),
		a12.dbl(),
		a13.dbl(),
		a14.dbl(),
		a15.dbl(),
		a20.dbl(),
		a21.dbl(),
		a22.dbl(),
		a23.dbl(),
		a24.dbl(),
		a25.dbl(),
		a30.dbl(),
		a31.dbl(),
		a32.dbl(),
		a33.dbl(),
		a34.dbl(),
		a35.dbl(),
		a40.dbl(),
		a41.dbl(),
		a42.dbl(),
		a43.dbl(),
		a44.dbl(),
		a45.dbl(),
		a50.dbl(),
		a51.dbl(),
		a52.dbl(),
		a53.dbl(),
		a54.dbl(),
		a55.dbl(),
		Static_Filtered_sign_of_determinant6x6_36::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_sign_of_determinant6x6_36::number_of_failures++;
    return sign_of_determinant6x6(
		a00.exact(),
		a01.exact(),
		a02.exact(),
		a03.exact(),
		a04.exact(),
		a05.exact(),
		a10.exact(),
		a11.exact(),
		a12.exact(),
		a13.exact(),
		a14.exact(),
		a15.exact(),
		a20.exact(),
		a21.exact(),
		a22.exact(),
		a23.exact(),
		a24.exact(),
		a25.exact(),
		a30.exact(),
		a31.exact(),
		a32.exact(),
		a33.exact(),
		a34.exact(),
		a35.exact(),
		a40.exact(),
		a41.exact(),
		a42.exact(),
		a43.exact(),
		a44.exact(),
		a45.exact(),
		a50.exact(),
		a51.exact(),
		a52.exact(),
		a53.exact(),
		a54.exact(),
		a55.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

CGAL_END_NAMESPACE

#endif // CGAL_ARITHMETIC_FILTER_PREDICATES_SIGN_OF_DETERMINANT_H
