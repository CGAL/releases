// ======================================================================
//
// Copyright (c) 1999 The CGAL Consortium

// This software and related documentation is part of the Computational
// Geometry Algorithms Library (CGAL).
// This software and documentation is provided "as-is" and without warranty
// of any kind. In no event shall the CGAL Consortium be liable for any
// damage of any kind. 
//
// Every use of CGAL requires a license. 
//
// Academic research and teaching license
// - For academic research and teaching purposes, permission to use and copy
//   the software and its documentation is hereby granted free of charge,
//   provided that it is not a component of a commercial product, and this
//   notice appears in all copies of the software and related documentation. 
//
// Commercial licenses
// - A commercial license is available through Algorithmic Solutions, who also
//   markets LEDA (http://www.algorithmic-solutions.de). 
// - Commercial users may apply for an evaluation license by writing to
//   Algorithmic Solutions (contact@algorithmic-solutions.com). 
//
// The CGAL Consortium consists of Utrecht University (The Netherlands),
// ETH Zurich (Switzerland), Free University of Berlin (Germany),
// INRIA Sophia-Antipolis (France), Martin-Luther-University Halle-Wittenberg
// (Germany), Max-Planck-Institute Saarbrucken (Germany), RISC Linz (Austria),
// and Tel-Aviv University (Israel).
//
// ----------------------------------------------------------------------
// 
// release       : CGAL-2.1
// release_date  : 2000, January 11
// 
// file          : include/CGAL/Arithmetic_filter/predicates/kernel_ftC3.h
// package       : Interval_arithmetic (4.39)
// author(s)     : Sylvain Pion
//
// coordinator   : INRIA Sophia-Antipolis (<Mariette.Yvinec>)
// email         : cgal@cs.uu.nl
//
// ======================================================================

// This file is automatically generated by
// scripts/filtered_predicates_generator.pl

#ifndef CGAL_ARITHMETIC_FILTER_PREDICATES_KERNEL_FTC3_H
#define CGAL_ARITHMETIC_FILTER_PREDICATES_KERNEL_FTC3_H

CGAL_BEGIN_NAMESPACE

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
bool
collinearC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rz)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    bool result = collinearC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return collinearC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
bool
collinearC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rz)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return collinearC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    bool result = collinearC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_collinearC3_9
{
  static double _bound;
  static double _epsilon_0,_epsilon_1,_epsilon_2;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static bool update_epsilon(
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pz,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qz,
	const Static_filter_error &rx,
	const Static_filter_error &ry,
	const Static_filter_error &rz,
	double & epsilon_0,
	double & epsilon_1,
	double & epsilon_2)
  {
    typedef Static_filter_error FT;
  
    FT dpx = px-rx;
    FT dqx = qx-rx;
    FT dpy = py-ry;
    FT dqy = qy-ry;
    if (Static_Filtered_sign_of_determinant2x2_4::update_epsilon(dpx, dqx, dpy, dqy,
  		epsilon_0) != ZERO)
        return false;
    FT dpz = pz-rz;
    FT dqz = qz-rz;
    return Static_Filtered_sign_of_determinant2x2_4::update_epsilon(dpx, dqx, dpz, dqz,
  		epsilon_1) == ZERO
        && Static_Filtered_sign_of_determinant2x2_4::update_epsilon(dpy, dqy, dpz, dqz,
  		epsilon_2) == ZERO;
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,_epsilon_0,_epsilon_1,_epsilon_2);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static bool epsilon_variant(
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pz,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qz,
	const Restricted_double &rx,
	const Restricted_double &ry,
	const Restricted_double &rz,
	const double & epsilon_0,
	const double & epsilon_1,
	const double & epsilon_2)
  {
    typedef Restricted_double FT;
  
    FT dpx = px-rx;
    FT dqx = qx-rx;
    FT dpy = py-ry;
    FT dqy = qy-ry;
    if (Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(dpx, dqx, dpy, dqy,
  		epsilon_0) != ZERO)
        return false;
    FT dpz = pz-rz;
    FT dqz = qz-rz;
    return Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(dpx, dqx, dpz, dqz,
  		epsilon_1) == ZERO
        && Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(dpy, dqy, dpz, dqz,
  		epsilon_2) == ZERO;
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
bool
collinearC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rz)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_collinearC3_9::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ry.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rz.to_double()));
    // Re-adjust the context.
    Static_Filtered_collinearC3_9::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_collinearC3_9::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		Static_Filtered_collinearC3_9::_epsilon_0,
		Static_Filtered_collinearC3_9::_epsilon_1,
		Static_Filtered_collinearC3_9::_epsilon_2);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_collinearC3_9::number_of_failures++;
    return collinearC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
bool
collinearC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rz)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_collinearC3_9::_bound; )
  CGAL_assertion(!(
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_collinearC3_9::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		Static_Filtered_collinearC3_9::_epsilon_0,
		Static_Filtered_collinearC3_9::_epsilon_1,
		Static_Filtered_collinearC3_9::_epsilon_2);
  }
  catch (...)
  {
    Static_Filtered_collinearC3_9::number_of_failures++;
    return collinearC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Orientation
orientationC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sz)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    Orientation result = orientationC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return orientationC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Orientation
orientationC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sz)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return orientationC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    Orientation result = orientationC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_orientationC3_12
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Orientation update_epsilon(
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pz,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qz,
	const Static_filter_error &rx,
	const Static_filter_error &ry,
	const Static_filter_error &rz,
	const Static_filter_error &sx,
	const Static_filter_error &sy,
	const Static_filter_error &sz,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return Orientation(Static_Filtered_sign_of_determinant3x3_9::update_epsilon(qx-px,rx-px,sx-px,
                                              qy-py,ry-py,sy-py,
                                              qz-pz,rz-pz,sz-pz,
  		epsilon_0));
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Orientation epsilon_variant(
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pz,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qz,
	const Restricted_double &rx,
	const Restricted_double &ry,
	const Restricted_double &rz,
	const Restricted_double &sx,
	const Restricted_double &sy,
	const Restricted_double &sz,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return Orientation(Static_Filtered_sign_of_determinant3x3_9::epsilon_variant(qx-px,rx-px,sx-px,
                                              qy-py,ry-py,sy-py,
                                              qz-pz,rz-pz,sz-pz,
  		epsilon_0));
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Orientation
orientationC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sz)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_orientationC3_12::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound ||
	fabs(sx.to_double()) > SAF_bound ||
	fabs(sy.to_double()) > SAF_bound ||
	fabs(sz.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ry.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sz.to_double()));
    // Re-adjust the context.
    Static_Filtered_orientationC3_12::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_orientationC3_12::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		sx.dbl(),
		sy.dbl(),
		sz.dbl(),
		Static_Filtered_orientationC3_12::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_orientationC3_12::number_of_failures++;
    return orientationC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Orientation
orientationC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sz)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_orientationC3_12::_bound; )
  CGAL_assertion(!(
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound ||
	fabs(sx.to_double()) > SAF_bound ||
	fabs(sy.to_double()) > SAF_bound ||
	fabs(sz.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_orientationC3_12::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		sx.dbl(),
		sy.dbl(),
		sz.dbl(),
		Static_Filtered_orientationC3_12::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_orientationC3_12::number_of_failures++;
    return orientationC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
bool
equal_directionC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &dx1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &dy1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &dz1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &dx2,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &dy2,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &dz2)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    bool result = equal_directionC3(
		dx1.interval(),
		dy1.interval(),
		dz1.interval(),
		dx2.interval(),
		dy2.interval(),
		dz2.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return equal_directionC3(
		dx1.exact(),
		dy1.exact(),
		dz1.exact(),
		dx2.exact(),
		dy2.exact(),
		dz2.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
bool
equal_directionC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &dx1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &dy1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &dz1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &dx2,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &dy2,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &dz2)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return equal_directionC3(
		dx1.interval(),
		dy1.interval(),
		dz1.interval(),
		dx2.interval(),
		dy2.interval(),
		dz2.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    bool result = equal_directionC3(
		dx1.exact(),
		dy1.exact(),
		dz1.exact(),
		dx2.exact(),
		dy2.exact(),
		dz2.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_equal_directionC3_6
{
  static double _bound;
  static double _epsilon_0,_epsilon_1,_epsilon_2,_epsilon_3,_epsilon_4,_epsilon_5,_epsilon_6,_epsilon_7,_epsilon_8;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static bool update_epsilon(
	const Static_filter_error &dx1,
	const Static_filter_error &dy1,
	const Static_filter_error &dz1,
	const Static_filter_error &dx2,
	const Static_filter_error &dy2,
	const Static_filter_error &dz2,
	double & epsilon_0,
	double & epsilon_1,
	double & epsilon_2,
	double & epsilon_3,
	double & epsilon_4,
	double & epsilon_5,
	double & epsilon_6,
	double & epsilon_7,
	double & epsilon_8)
  {
    typedef Static_filter_error FT;
  
    return Static_Filtered_sign_of_determinant2x2_4::update_epsilon(dx1, dy1, dx2, dy2,
  		epsilon_0) == ZERO
        && Static_Filtered_sign_of_determinant2x2_4::update_epsilon(dx1, dz1, dx2, dz2,
  		epsilon_1) == ZERO
        && Static_Filtered_sign_of_determinant2x2_4::update_epsilon(dy1, dz1, dy2, dz2,
  		epsilon_2) == ZERO
        && CGAL::Static_Filtered_sign_1::update_epsilon(dx1,
  		epsilon_3) == CGAL::Static_Filtered_sign_1::update_epsilon(dx2,
  		epsilon_4)
        && CGAL::Static_Filtered_sign_1::update_epsilon(dy1,
  		epsilon_5) == CGAL::Static_Filtered_sign_1::update_epsilon(dy2,
  		epsilon_6)
        && CGAL::Static_Filtered_sign_1::update_epsilon(dz1,
  		epsilon_7) == CGAL::Static_Filtered_sign_1::update_epsilon(dz2,
  		epsilon_8);
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,_epsilon_0,_epsilon_1,_epsilon_2,_epsilon_3,_epsilon_4,_epsilon_5,_epsilon_6,_epsilon_7,_epsilon_8);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static bool epsilon_variant(
	const Restricted_double &dx1,
	const Restricted_double &dy1,
	const Restricted_double &dz1,
	const Restricted_double &dx2,
	const Restricted_double &dy2,
	const Restricted_double &dz2,
	const double & epsilon_0,
	const double & epsilon_1,
	const double & epsilon_2,
	const double & epsilon_3,
	const double & epsilon_4,
	const double & epsilon_5,
	const double & epsilon_6,
	const double & epsilon_7,
	const double & epsilon_8)
  {
    typedef Restricted_double FT;
  
    return Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(dx1, dy1, dx2, dy2,
  		epsilon_0) == ZERO
        && Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(dx1, dz1, dx2, dz2,
  		epsilon_1) == ZERO
        && Static_Filtered_sign_of_determinant2x2_4::epsilon_variant(dy1, dz1, dy2, dz2,
  		epsilon_2) == ZERO
        && CGAL::Static_Filtered_sign_1::epsilon_variant(dx1,
  		epsilon_3) == CGAL::Static_Filtered_sign_1::epsilon_variant(dx2,
  		epsilon_4)
        && CGAL::Static_Filtered_sign_1::epsilon_variant(dy1,
  		epsilon_5) == CGAL::Static_Filtered_sign_1::epsilon_variant(dy2,
  		epsilon_6)
        && CGAL::Static_Filtered_sign_1::epsilon_variant(dz1,
  		epsilon_7) == CGAL::Static_Filtered_sign_1::epsilon_variant(dz2,
  		epsilon_8);
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
bool
equal_directionC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &dx1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &dy1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &dz1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &dx2,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &dy2,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &dz2)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_equal_directionC3_6::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(dx1.to_double()) > SAF_bound ||
	fabs(dy1.to_double()) > SAF_bound ||
	fabs(dz1.to_double()) > SAF_bound ||
	fabs(dx2.to_double()) > SAF_bound ||
	fabs(dy2.to_double()) > SAF_bound ||
	fabs(dz2.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(dx1.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(dy1.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(dz1.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(dx2.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(dy2.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(dz2.to_double()));
    // Re-adjust the context.
    Static_Filtered_equal_directionC3_6::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_equal_directionC3_6::epsilon_variant(
		dx1.dbl(),
		dy1.dbl(),
		dz1.dbl(),
		dx2.dbl(),
		dy2.dbl(),
		dz2.dbl(),
		Static_Filtered_equal_directionC3_6::_epsilon_0,
		Static_Filtered_equal_directionC3_6::_epsilon_1,
		Static_Filtered_equal_directionC3_6::_epsilon_2,
		Static_Filtered_equal_directionC3_6::_epsilon_3,
		Static_Filtered_equal_directionC3_6::_epsilon_4,
		Static_Filtered_equal_directionC3_6::_epsilon_5,
		Static_Filtered_equal_directionC3_6::_epsilon_6,
		Static_Filtered_equal_directionC3_6::_epsilon_7,
		Static_Filtered_equal_directionC3_6::_epsilon_8);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_equal_directionC3_6::number_of_failures++;
    return equal_directionC3(
		dx1.exact(),
		dy1.exact(),
		dz1.exact(),
		dx2.exact(),
		dy2.exact(),
		dz2.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
bool
equal_directionC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &dx1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &dy1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &dz1,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &dx2,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &dy2,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &dz2)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_equal_directionC3_6::_bound; )
  CGAL_assertion(!(
	fabs(dx1.to_double()) > SAF_bound ||
	fabs(dy1.to_double()) > SAF_bound ||
	fabs(dz1.to_double()) > SAF_bound ||
	fabs(dx2.to_double()) > SAF_bound ||
	fabs(dy2.to_double()) > SAF_bound ||
	fabs(dz2.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_equal_directionC3_6::epsilon_variant(
		dx1.dbl(),
		dy1.dbl(),
		dz1.dbl(),
		dx2.dbl(),
		dy2.dbl(),
		dz2.dbl(),
		Static_Filtered_equal_directionC3_6::_epsilon_0,
		Static_Filtered_equal_directionC3_6::_epsilon_1,
		Static_Filtered_equal_directionC3_6::_epsilon_2,
		Static_Filtered_equal_directionC3_6::_epsilon_3,
		Static_Filtered_equal_directionC3_6::_epsilon_4,
		Static_Filtered_equal_directionC3_6::_epsilon_5,
		Static_Filtered_equal_directionC3_6::_epsilon_6,
		Static_Filtered_equal_directionC3_6::_epsilon_7,
		Static_Filtered_equal_directionC3_6::_epsilon_8);
  }
  catch (...)
  {
    Static_Filtered_equal_directionC3_6::number_of_failures++;
    return equal_directionC3(
		dx1.exact(),
		dy1.exact(),
		dz1.exact(),
		dx2.exact(),
		dy2.exact(),
		dz2.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_planeC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &d,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pz)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    Oriented_side result = side_of_oriented_planeC3(
		a.interval(),
		b.interval(),
		c.interval(),
		d.interval(),
		px.interval(),
		py.interval(),
		pz.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return side_of_oriented_planeC3(
		a.exact(),
		b.exact(),
		c.exact(),
		d.exact(),
		px.exact(),
		py.exact(),
		pz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_planeC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &d,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pz)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return side_of_oriented_planeC3(
		a.interval(),
		b.interval(),
		c.interval(),
		d.interval(),
		px.interval(),
		py.interval(),
		pz.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    Oriented_side result = side_of_oriented_planeC3(
		a.exact(),
		b.exact(),
		c.exact(),
		d.exact(),
		px.exact(),
		py.exact(),
		pz.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_side_of_oriented_planeC3_7
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Oriented_side update_epsilon(
	const Static_filter_error &a,
	const Static_filter_error &b,
	const Static_filter_error &c,
	const Static_filter_error &d,
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pz,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return Oriented_side(CGAL::Static_Filtered_sign_1::update_epsilon(a*px + b*py + c*pz +d,
  		epsilon_0));
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Oriented_side epsilon_variant(
	const Restricted_double &a,
	const Restricted_double &b,
	const Restricted_double &c,
	const Restricted_double &d,
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pz,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return Oriented_side(CGAL::Static_Filtered_sign_1::epsilon_variant(a*px + b*py + c*pz +d,
  		epsilon_0));
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_planeC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &d,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pz)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_side_of_oriented_planeC3_7::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(a.to_double()) > SAF_bound ||
	fabs(b.to_double()) > SAF_bound ||
	fabs(c.to_double()) > SAF_bound ||
	fabs(d.to_double()) > SAF_bound ||
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(a.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(b.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(c.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(d.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pz.to_double()));
    // Re-adjust the context.
    Static_Filtered_side_of_oriented_planeC3_7::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_side_of_oriented_planeC3_7::epsilon_variant(
		a.dbl(),
		b.dbl(),
		c.dbl(),
		d.dbl(),
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		Static_Filtered_side_of_oriented_planeC3_7::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_side_of_oriented_planeC3_7::number_of_failures++;
    return side_of_oriented_planeC3(
		a.exact(),
		b.exact(),
		c.exact(),
		d.exact(),
		px.exact(),
		py.exact(),
		pz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_planeC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &a,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &b,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &c,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &d,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pz)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_side_of_oriented_planeC3_7::_bound; )
  CGAL_assertion(!(
	fabs(a.to_double()) > SAF_bound ||
	fabs(b.to_double()) > SAF_bound ||
	fabs(c.to_double()) > SAF_bound ||
	fabs(d.to_double()) > SAF_bound ||
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_side_of_oriented_planeC3_7::epsilon_variant(
		a.dbl(),
		b.dbl(),
		c.dbl(),
		d.dbl(),
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		Static_Filtered_side_of_oriented_planeC3_7::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_side_of_oriented_planeC3_7::number_of_failures++;
    return side_of_oriented_planeC3(
		a.exact(),
		b.exact(),
		c.exact(),
		d.exact(),
		px.exact(),
		py.exact(),
		pz.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_sphereC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &tz)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    Oriented_side result = side_of_oriented_sphereC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval(),
		tx.interval(),
		ty.interval(),
		tz.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return side_of_oriented_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_sphereC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &tz)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return side_of_oriented_sphereC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval(),
		tx.interval(),
		ty.interval(),
		tz.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    Oriented_side result = side_of_oriented_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_side_of_oriented_sphereC3_15
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Oriented_side update_epsilon(
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pz,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qz,
	const Static_filter_error &rx,
	const Static_filter_error &ry,
	const Static_filter_error &rz,
	const Static_filter_error &sx,
	const Static_filter_error &sy,
	const Static_filter_error &sz,
	const Static_filter_error &tx,
	const Static_filter_error &ty,
	const Static_filter_error &tz,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    FT ptx = px - tx;
    FT pty = py - ty;
    FT ptz = pz - tz;
    FT pt2 = square(ptx) + square(pty) + square(ptz);
    FT qtx = qx - tx;
    FT qty = qy - ty;
    FT qtz = qz - tz;
    FT qt2 = square(qtx) + square(qty) + square(qtz);
    FT rtx = rx - tx;
    FT rty = ry - ty;
    FT rtz = rz - tz;
    FT rt2 = square(rtx) + square(rty) + square(rtz);
    FT stx = sx - tx;
    FT sty = sy - ty;
    FT stz = sz - tz;
    FT st2 = square(stx) + square(sty) + square(stz);
    return Oriented_side(Static_Filtered_sign_of_determinant4x4_16::update_epsilon(ptx,pty,ptz,pt2,
                                                rtx,rty,rtz,rt2,
                                                qtx,qty,qtz,qt2,
                                                stx,sty,stz,st2,
  		epsilon_0));
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Oriented_side epsilon_variant(
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pz,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qz,
	const Restricted_double &rx,
	const Restricted_double &ry,
	const Restricted_double &rz,
	const Restricted_double &sx,
	const Restricted_double &sy,
	const Restricted_double &sz,
	const Restricted_double &tx,
	const Restricted_double &ty,
	const Restricted_double &tz,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    FT ptx = px - tx;
    FT pty = py - ty;
    FT ptz = pz - tz;
    FT pt2 = square(ptx) + square(pty) + square(ptz);
    FT qtx = qx - tx;
    FT qty = qy - ty;
    FT qtz = qz - tz;
    FT qt2 = square(qtx) + square(qty) + square(qtz);
    FT rtx = rx - tx;
    FT rty = ry - ty;
    FT rtz = rz - tz;
    FT rt2 = square(rtx) + square(rty) + square(rtz);
    FT stx = sx - tx;
    FT sty = sy - ty;
    FT stz = sz - tz;
    FT st2 = square(stx) + square(sty) + square(stz);
    return Oriented_side(Static_Filtered_sign_of_determinant4x4_16::epsilon_variant(ptx,pty,ptz,pt2,
                                                rtx,rty,rtz,rt2,
                                                qtx,qty,qtz,qt2,
                                                stx,sty,stz,st2,
  		epsilon_0));
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_sphereC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &tz)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_side_of_oriented_sphereC3_15::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound ||
	fabs(sx.to_double()) > SAF_bound ||
	fabs(sy.to_double()) > SAF_bound ||
	fabs(sz.to_double()) > SAF_bound ||
	fabs(tx.to_double()) > SAF_bound ||
	fabs(ty.to_double()) > SAF_bound ||
	fabs(tz.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ry.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(tx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ty.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(tz.to_double()));
    // Re-adjust the context.
    Static_Filtered_side_of_oriented_sphereC3_15::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_side_of_oriented_sphereC3_15::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		sx.dbl(),
		sy.dbl(),
		sz.dbl(),
		tx.dbl(),
		ty.dbl(),
		tz.dbl(),
		Static_Filtered_side_of_oriented_sphereC3_15::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_side_of_oriented_sphereC3_15::number_of_failures++;
    return side_of_oriented_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_LARGE_INLINE */
Oriented_side
side_of_oriented_sphereC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &tz)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_side_of_oriented_sphereC3_15::_bound; )
  CGAL_assertion(!(
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound ||
	fabs(sx.to_double()) > SAF_bound ||
	fabs(sy.to_double()) > SAF_bound ||
	fabs(sz.to_double()) > SAF_bound ||
	fabs(tx.to_double()) > SAF_bound ||
	fabs(ty.to_double()) > SAF_bound ||
	fabs(tz.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_side_of_oriented_sphereC3_15::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		sx.dbl(),
		sy.dbl(),
		sz.dbl(),
		tx.dbl(),
		ty.dbl(),
		tz.dbl(),
		Static_Filtered_side_of_oriented_sphereC3_15::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_side_of_oriented_sphereC3_15::number_of_failures++;
    return side_of_oriented_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Bounded_side
side_of_bounded_sphereC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &sz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &tz)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    Bounded_side result = side_of_bounded_sphereC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval(),
		tx.interval(),
		ty.interval(),
		tz.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return side_of_bounded_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Bounded_side
side_of_bounded_sphereC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &sz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &tz)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return side_of_bounded_sphereC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval(),
		sx.interval(),
		sy.interval(),
		sz.interval(),
		tx.interval(),
		ty.interval(),
		tz.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    Bounded_side result = side_of_bounded_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_side_of_bounded_sphereC3_15
{
  static double _bound;
  static double _epsilon_0,_epsilon_1;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Bounded_side update_epsilon(
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pz,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qz,
	const Static_filter_error &rx,
	const Static_filter_error &ry,
	const Static_filter_error &rz,
	const Static_filter_error &sx,
	const Static_filter_error &sy,
	const Static_filter_error &sz,
	const Static_filter_error &tx,
	const Static_filter_error &ty,
	const Static_filter_error &tz,
	double & epsilon_0,
	double & epsilon_1)
  {
    typedef Static_filter_error FT;
  
    Oriented_side s = Static_Filtered_side_of_oriented_sphereC3_15::update_epsilon(px, py, pz,
                                                qx, qy, qz,
                                                rx, ry, rz,
                                                sx, sy, sz,
                                                tx, ty, tz,
  		epsilon_0);
    Orientation o = Static_Filtered_orientationC3_12::update_epsilon(px, py, pz,
                                  qx, qy, qz,
                                  rx, ry, rz,
                                  sx, sy, sz,
  		epsilon_1);
    return Bounded_side(s * o);
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,_epsilon_0,_epsilon_1);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Bounded_side epsilon_variant(
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pz,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qz,
	const Restricted_double &rx,
	const Restricted_double &ry,
	const Restricted_double &rz,
	const Restricted_double &sx,
	const Restricted_double &sy,
	const Restricted_double &sz,
	const Restricted_double &tx,
	const Restricted_double &ty,
	const Restricted_double &tz,
	const double & epsilon_0,
	const double & epsilon_1)
  {
    typedef Restricted_double FT;
  
    Oriented_side s = Static_Filtered_side_of_oriented_sphereC3_15::epsilon_variant(px, py, pz,
                                                qx, qy, qz,
                                                rx, ry, rz,
                                                sx, sy, sz,
                                                tx, ty, tz,
  		epsilon_0);
    Orientation o = Static_Filtered_orientationC3_12::epsilon_variant(px, py, pz,
                                  qx, qy, qz,
                                  rx, ry, rz,
                                  sx, sy, sz,
  		epsilon_1);
    return Bounded_side(s * o);
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Bounded_side
side_of_bounded_sphereC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &sz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &tz)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_side_of_bounded_sphereC3_15::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound ||
	fabs(sx.to_double()) > SAF_bound ||
	fabs(sy.to_double()) > SAF_bound ||
	fabs(sz.to_double()) > SAF_bound ||
	fabs(tx.to_double()) > SAF_bound ||
	fabs(ty.to_double()) > SAF_bound ||
	fabs(tz.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ry.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(sz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(tx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ty.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(tz.to_double()));
    // Re-adjust the context.
    Static_Filtered_side_of_bounded_sphereC3_15::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_side_of_bounded_sphereC3_15::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		sx.dbl(),
		sy.dbl(),
		sz.dbl(),
		tx.dbl(),
		ty.dbl(),
		tz.dbl(),
		Static_Filtered_side_of_bounded_sphereC3_15::_epsilon_0,
		Static_Filtered_side_of_bounded_sphereC3_15::_epsilon_1);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_side_of_bounded_sphereC3_15::number_of_failures++;
    return side_of_bounded_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Bounded_side
side_of_bounded_sphereC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &sz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &tx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ty,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &tz)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_side_of_bounded_sphereC3_15::_bound; )
  CGAL_assertion(!(
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound ||
	fabs(sx.to_double()) > SAF_bound ||
	fabs(sy.to_double()) > SAF_bound ||
	fabs(sz.to_double()) > SAF_bound ||
	fabs(tx.to_double()) > SAF_bound ||
	fabs(ty.to_double()) > SAF_bound ||
	fabs(tz.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_side_of_bounded_sphereC3_15::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		sx.dbl(),
		sy.dbl(),
		sz.dbl(),
		tx.dbl(),
		ty.dbl(),
		tz.dbl(),
		Static_Filtered_side_of_bounded_sphereC3_15::_epsilon_0,
		Static_Filtered_side_of_bounded_sphereC3_15::_epsilon_1);
  }
  catch (...)
  {
    Static_Filtered_side_of_bounded_sphereC3_15::number_of_failures++;
    return side_of_bounded_sphereC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact(),
		sx.exact(),
		sy.exact(),
		sz.exact(),
		tx.exact(),
		ty.exact(),
		tz.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_INLINE */
Comparison_result
cmp_dist_to_pointC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &rz)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    Comparison_result result = cmp_dist_to_pointC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return cmp_dist_to_pointC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_INLINE */
Comparison_result
cmp_dist_to_pointC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &rz)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return cmp_dist_to_pointC3(
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval(),
		rx.interval(),
		ry.interval(),
		rz.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    Comparison_result result = cmp_dist_to_pointC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_cmp_dist_to_pointC3_9
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Comparison_result update_epsilon(
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pz,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qz,
	const Static_filter_error &rx,
	const Static_filter_error &ry,
	const Static_filter_error &rz,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return CGAL::Static_Filtered_compare_2::update_epsilon(squared_distanceC3(px,py,pz,qx,qy,qz),
                         squared_distanceC3(px,py,pz,rx,ry,rz),
  		epsilon_0);
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Comparison_result epsilon_variant(
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pz,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qz,
	const Restricted_double &rx,
	const Restricted_double &ry,
	const Restricted_double &rz,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return CGAL::Static_Filtered_compare_2::epsilon_variant(squared_distanceC3(px,py,pz,qx,qy,qz),
                         squared_distanceC3(px,py,pz,rx,ry,rz),
  		epsilon_0);
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_INLINE */
Comparison_result
cmp_dist_to_pointC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &rz)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_cmp_dist_to_pointC3_9::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ry.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(rz.to_double()));
    // Re-adjust the context.
    Static_Filtered_cmp_dist_to_pointC3_9::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_cmp_dist_to_pointC3_9::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		Static_Filtered_cmp_dist_to_pointC3_9::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_cmp_dist_to_pointC3_9::number_of_failures++;
    return cmp_dist_to_pointC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_INLINE */
Comparison_result
cmp_dist_to_pointC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &rz)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_cmp_dist_to_pointC3_9::_bound; )
  CGAL_assertion(!(
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound ||
	fabs(rx.to_double()) > SAF_bound ||
	fabs(ry.to_double()) > SAF_bound ||
	fabs(rz.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_cmp_dist_to_pointC3_9::epsilon_variant(
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		rx.dbl(),
		ry.dbl(),
		rz.dbl(),
		Static_Filtered_cmp_dist_to_pointC3_9::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_cmp_dist_to_pointC3_9::number_of_failures++;
    return cmp_dist_to_pointC3(
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact(),
		rx.exact(),
		ry.exact(),
		rz.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
cmp_signed_dist_to_directionC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pa,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pb,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pc,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qz)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    Comparison_result result = cmp_signed_dist_to_directionC3(
		pa.interval(),
		pb.interval(),
		pc.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return cmp_signed_dist_to_directionC3(
		pa.exact(),
		pb.exact(),
		pc.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
cmp_signed_dist_to_directionC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pa,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pb,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pc,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qz)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return cmp_signed_dist_to_directionC3(
		pa.interval(),
		pb.interval(),
		pc.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    Comparison_result result = cmp_signed_dist_to_directionC3(
		pa.exact(),
		pb.exact(),
		pc.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_cmp_signed_dist_to_directionC3_9
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Comparison_result update_epsilon(
	const Static_filter_error &pa,
	const Static_filter_error &pb,
	const Static_filter_error &pc,
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pz,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qz,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return CGAL::Static_Filtered_compare_2::update_epsilon(scaled_distance_to_directionC3(pa,pb,pc,px,py,pz),
                         scaled_distance_to_directionC3(pa,pb,pc,qx,qy,qz),
  		epsilon_0);
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Comparison_result epsilon_variant(
	const Restricted_double &pa,
	const Restricted_double &pb,
	const Restricted_double &pc,
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pz,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qz,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return CGAL::Static_Filtered_compare_2::epsilon_variant(scaled_distance_to_directionC3(pa,pb,pc,px,py,pz),
                         scaled_distance_to_directionC3(pa,pb,pc,qx,qy,qz),
  		epsilon_0);
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
cmp_signed_dist_to_directionC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pa,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pb,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pc,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qz)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_cmp_signed_dist_to_directionC3_9::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(pa.to_double()) > SAF_bound ||
	fabs(pb.to_double()) > SAF_bound ||
	fabs(pc.to_double()) > SAF_bound ||
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(pa.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pb.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pc.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qz.to_double()));
    // Re-adjust the context.
    Static_Filtered_cmp_signed_dist_to_directionC3_9::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_cmp_signed_dist_to_directionC3_9::epsilon_variant(
		pa.dbl(),
		pb.dbl(),
		pc.dbl(),
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		Static_Filtered_cmp_signed_dist_to_directionC3_9::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_cmp_signed_dist_to_directionC3_9::number_of_failures++;
    return cmp_signed_dist_to_directionC3(
		pa.exact(),
		pb.exact(),
		pc.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
cmp_signed_dist_to_directionC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pa,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pb,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pc,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qz)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_cmp_signed_dist_to_directionC3_9::_bound; )
  CGAL_assertion(!(
	fabs(pa.to_double()) > SAF_bound ||
	fabs(pb.to_double()) > SAF_bound ||
	fabs(pc.to_double()) > SAF_bound ||
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_cmp_signed_dist_to_directionC3_9::epsilon_variant(
		pa.dbl(),
		pb.dbl(),
		pc.dbl(),
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		Static_Filtered_cmp_signed_dist_to_directionC3_9::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_cmp_signed_dist_to_directionC3_9::number_of_failures++;
    return cmp_signed_dist_to_directionC3(
		pa.exact(),
		pb.exact(),
		pc.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
cmp_signed_dist_to_planeC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ppx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ppy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &ppz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pqx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pqy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pqz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &prx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &prz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Protected, CGAL_IA_CACHE> &qz)
{
  FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_UPWARD);
  try
  {
    Comparison_result result = cmp_signed_dist_to_planeC3(
		ppx.interval(),
		ppy.interval(),
		ppz.interval(),
		pqx.interval(),
		pqy.interval(),
		pqz.interval(),
		prx.interval(),
		pry.interval(),
		prz.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
    FPU_set_cw(backup);
    return result;
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_set_cw(backup);
    return cmp_signed_dist_to_planeC3(
		ppx.exact(),
		ppy.exact(),
		ppz.exact(),
		pqx.exact(),
		pqy.exact(),
		pqz.exact(),
		prx.exact(),
		pry.exact(),
		prz.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
cmp_signed_dist_to_planeC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ppx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ppy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &ppz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pqx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pqy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pqz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &prx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &prz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Dynamic, Advanced, CGAL_IA_CACHE> &qz)
{
  CGAL_expensive_assertion(FPU_empiric_test() == CGAL_FE_UPWARD);
  try
  {
    return cmp_signed_dist_to_planeC3(
		ppx.interval(),
		ppy.interval(),
		ppz.interval(),
		pqx.interval(),
		pqy.interval(),
		pqz.interval(),
		prx.interval(),
		pry.interval(),
		prz.interval(),
		px.interval(),
		py.interval(),
		pz.interval(),
		qx.interval(),
		qy.interval(),
		qz.interval());
  } 
  catch (Interval_nt_advanced::unsafe_comparison)
  {
    FPU_CW_t backup = FPU_get_and_set_cw(CGAL_FE_TONEAREST);
    Comparison_result result = cmp_signed_dist_to_planeC3(
		ppx.exact(),
		ppy.exact(),
		ppz.exact(),
		pqx.exact(),
		pqy.exact(),
		pqz.exact(),
		prx.exact(),
		pry.exact(),
		prz.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
    FPU_set_cw(backup);
    return result;
  }
}

#ifdef CGAL_IA_NEW_FILTERS

struct Static_Filtered_cmp_signed_dist_to_planeC3_15
{
  static double _bound;
  static double _epsilon_0;
  static unsigned number_of_failures; // ?
  static unsigned number_of_updates;

  static Comparison_result update_epsilon(
	const Static_filter_error &ppx,
	const Static_filter_error &ppy,
	const Static_filter_error &ppz,
	const Static_filter_error &pqx,
	const Static_filter_error &pqy,
	const Static_filter_error &pqz,
	const Static_filter_error &prx,
	const Static_filter_error &pry,
	const Static_filter_error &prz,
	const Static_filter_error &px,
	const Static_filter_error &py,
	const Static_filter_error &pz,
	const Static_filter_error &qx,
	const Static_filter_error &qy,
	const Static_filter_error &qz,
	double & epsilon_0)
  {
    typedef Static_filter_error FT;
  
    return Comparison_result(Static_Filtered_sign_of_determinant3x3_9::update_epsilon(
  	      pqx-ppx, pqy-ppy, pqz-ppz,
  	      prx-ppx, pry-ppy, prz-ppz,
  	      qx-px,   qy-py,   qz-pz,
  		epsilon_0));
  }

  // Call this function from the outside to update the context.
  static void new_bound (const double b) // , const double error = 0)
  {
    _bound = b;
    number_of_updates++;
    // recompute the epsilons: "just" call it over Static_filter_error.
    // That's the tricky part that might not work for everything.
    (void) update_epsilon(b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,_epsilon_0);
    // TODO: We should verify that all epsilons have really been updated.
  }

  static Comparison_result epsilon_variant(
	const Restricted_double &ppx,
	const Restricted_double &ppy,
	const Restricted_double &ppz,
	const Restricted_double &pqx,
	const Restricted_double &pqy,
	const Restricted_double &pqz,
	const Restricted_double &prx,
	const Restricted_double &pry,
	const Restricted_double &prz,
	const Restricted_double &px,
	const Restricted_double &py,
	const Restricted_double &pz,
	const Restricted_double &qx,
	const Restricted_double &qy,
	const Restricted_double &qz,
	const double & epsilon_0)
  {
    typedef Restricted_double FT;
  
    return Comparison_result(Static_Filtered_sign_of_determinant3x3_9::epsilon_variant(
  	      pqx-ppx, pqy-ppy, pqz-ppz,
  	      prx-ppx, pry-ppy, prz-ppz,
  	      qx-px,   qy-py,   qz-pz,
  		epsilon_0));
  }
};

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
cmp_signed_dist_to_planeC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ppx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ppy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &ppz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pqx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pqy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pqz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &prx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &prz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Protected, CGAL_IA_CACHE> &qz)
{
//   bool re_adjusted = false;
  const double SAF_bound = Static_Filtered_cmp_signed_dist_to_planeC3_15::_bound;

  // Check the bounds.  All arguments must be <= SAF_bound.
  if (
	fabs(ppx.to_double()) > SAF_bound ||
	fabs(ppy.to_double()) > SAF_bound ||
	fabs(ppz.to_double()) > SAF_bound ||
	fabs(pqx.to_double()) > SAF_bound ||
	fabs(pqy.to_double()) > SAF_bound ||
	fabs(pqz.to_double()) > SAF_bound ||
	fabs(prx.to_double()) > SAF_bound ||
	fabs(pry.to_double()) > SAF_bound ||
	fabs(prz.to_double()) > SAF_bound ||
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound)
  {
// re_adjust:
    // Compute the new bound.
    double NEW_bound = 0.0;
    NEW_bound = std::max(NEW_bound, fabs(ppx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ppy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(ppz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pqx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pqy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pqz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(prx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pry.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(prz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(px.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(py.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(pz.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qx.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qy.to_double()));
    NEW_bound = std::max(NEW_bound, fabs(qz.to_double()));
    // Re-adjust the context.
    Static_Filtered_cmp_signed_dist_to_planeC3_15::new_bound(NEW_bound);
  }

  try
  {
    return Static_Filtered_cmp_signed_dist_to_planeC3_15::epsilon_variant(
		ppx.dbl(),
		ppy.dbl(),
		ppz.dbl(),
		pqx.dbl(),
		pqy.dbl(),
		pqz.dbl(),
		prx.dbl(),
		pry.dbl(),
		prz.dbl(),
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		Static_Filtered_cmp_signed_dist_to_planeC3_15::_epsilon_0);
  }
  catch (...)
  {
    // if (!re_adjusted) {  // It failed, we re-adjust once.
      // re_adjusted = true;
      // goto re_adjust;
    // }
    Static_Filtered_cmp_signed_dist_to_planeC3_15::number_of_failures++;
    return cmp_signed_dist_to_planeC3(
		ppx.exact(),
		ppy.exact(),
		ppz.exact(),
		pqx.exact(),
		pqy.exact(),
		pqz.exact(),
		prx.exact(),
		pry.exact(),
		prz.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
}

#ifndef CGAL_CFG_MATCHING_BUG_2
template < class CGAL_IA_CT, class CGAL_IA_ET, class CGAL_IA_CACHE >
#else
template <>
#endif
/* CGAL_KERNEL_MEDIUM_INLINE */
Comparison_result
cmp_signed_dist_to_planeC3(
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ppx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ppy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &ppz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pqx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pqy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pqz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &prx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pry,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &prz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &px,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &py,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &pz,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qx,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qy,
    const Filtered_exact <CGAL_IA_CT, CGAL_IA_ET, Static, Advanced, CGAL_IA_CACHE> &qz)
{
  CGAL_assertion_code(
    const double SAF_bound = Static_Filtered_cmp_signed_dist_to_planeC3_15::_bound; )
  CGAL_assertion(!(
	fabs(ppx.to_double()) > SAF_bound ||
	fabs(ppy.to_double()) > SAF_bound ||
	fabs(ppz.to_double()) > SAF_bound ||
	fabs(pqx.to_double()) > SAF_bound ||
	fabs(pqy.to_double()) > SAF_bound ||
	fabs(pqz.to_double()) > SAF_bound ||
	fabs(prx.to_double()) > SAF_bound ||
	fabs(pry.to_double()) > SAF_bound ||
	fabs(prz.to_double()) > SAF_bound ||
	fabs(px.to_double()) > SAF_bound ||
	fabs(py.to_double()) > SAF_bound ||
	fabs(pz.to_double()) > SAF_bound ||
	fabs(qx.to_double()) > SAF_bound ||
	fabs(qy.to_double()) > SAF_bound ||
	fabs(qz.to_double()) > SAF_bound));

  try
  {
    return Static_Filtered_cmp_signed_dist_to_planeC3_15::epsilon_variant(
		ppx.dbl(),
		ppy.dbl(),
		ppz.dbl(),
		pqx.dbl(),
		pqy.dbl(),
		pqz.dbl(),
		prx.dbl(),
		pry.dbl(),
		prz.dbl(),
		px.dbl(),
		py.dbl(),
		pz.dbl(),
		qx.dbl(),
		qy.dbl(),
		qz.dbl(),
		Static_Filtered_cmp_signed_dist_to_planeC3_15::_epsilon_0);
  }
  catch (...)
  {
    Static_Filtered_cmp_signed_dist_to_planeC3_15::number_of_failures++;
    return cmp_signed_dist_to_planeC3(
		ppx.exact(),
		ppy.exact(),
		ppz.exact(),
		pqx.exact(),
		pqy.exact(),
		pqz.exact(),
		prx.exact(),
		pry.exact(),
		prz.exact(),
		px.exact(),
		py.exact(),
		pz.exact(),
		qx.exact(),
		qy.exact(),
		qz.exact());
  }
}

#endif // CGAL_IA_NEW_FILTERS

CGAL_END_NAMESPACE

#endif // CGAL_ARITHMETIC_FILTER_PREDICATES_KERNEL_FTC3_H
