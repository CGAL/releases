\documentclass[]{article}
\usepackage{amssymb}   % better mathematical symbols
\usepackage{fw-latex}
\usepackage{cgal}      % useful macros concerning CGAL

\textwidth=6in
\textheight=8.9in
\oddsidemargin=0.25in
\evensidemargin=0.25in
\topmargin=-0.5in
\begin{document}

@p typesetter = tex
@p no_doc_header

@!  This is a comment in funnelweb. The last two lines of this paragraph
@!  are pragmas that allow to write funnelweb code with more than 80 characters
@!  per line. It is not recommended though, as it leads to ugly line breaks.
@!  It is better when you do the line breaks yourself.
@!
@p maximum_output_line_length = 80
@p maximum_input_line_length = 80


\title{\bf Using Funnelweb to develop CGAL Code}
\author{Andreas Fabri}

\maketitle

@A@<Introduction@>

Literate programming means to intertwine code and documentation.
This is not automatically better than developing code and documenting it
separately, but it kind of automatically makes you document
what you are coding because it is in the same file.

There are several tools available that support this idea. For the
\cgal -project we opted for {\em funnelweb}, because it does no
typesetting of the code, as it is done by tools as for example {\em cweb}.

\smallskip
\noindent Remark: Text which is only there to illustrate the example
is put in {\sf sans serif} font.

@A@<An Example@>

In this section we give an example how to write a literate program
using {\em funnelweb}. Ideally you look at the source file, that is
at {\it funnelweb.fw}, at the same time.

A funnelweb document can be structured with sections and subsections
as a \LaTeX\ document. {\it Funnelweb} files contain {\em macros} and
{\em documentation}. Macros typically contain a piece of code. All
text surrounding macros makes up the documentation.


@B@<The line Macro@>


Macros always start with a `@@\$' followed by a nametag,
followed by a `==@@\{@@-' or a `+=@@\{@@-'. The latter allows to add more text
to a already defined macro. An example is given in the next section.
A macro always ends with a `@@\}'.

Here comes a macro that  reveals its usefulness if you look in the
funnelweb source, so forget about it for the moment. If you nevertheless
look at it you will find the `@@Z' and the `@@M' directives which
make that funnelweb does not complain if this macro is used {\em zero}
or {\em multiple} times.

@!  The following pragma makes that when you compile the C++ code
@!  and you find an error, the error is relative to the funnelweb
@!  file and not to the .C or .h file.

@p automatic_line_directive_macro = "line"
@p #line_offset = 0
@p #line_depth = 1
@$@<line@>@Z@M==@{#line @<#line@> "@<#file@>"@}

@B

When you do not explicitely write a heading in a sectioning command,
the text in the printed document is taken from the next macro.

\smallskip
{\sf We include the following header files containing the class definitions.}

@$@<Header Files@>==@{@-
#include <stream.h>
#include <CGAL/Point_2.h>
#include <CGAL/Segment_2.h>
@}

@B@<Typedefs Make Your Life Easier@>

{\sf Class names in \cgal\ are pretty long. They are prefixed to avoid
name clashes, they have the dimension encoded in the name and are
templated. This gives you a lot of flexibility. As long as you do not
use several number types or even representation classes at the same time
it is practical to define new types with the {\tt typedef} from \CC.}

@$@<typedefs@>+=@{@-
typedef double coord_type;
typedef CGAL_Point_2< C<coord_type> > Point;
@}

The macro with the nametag ``typedefs'' is additive, and here comes another
piece of it:

@$@<typedefs@>+=@{@-
typedef CGAL_Segment_2< C<coord_type> > Segment;
@}


@B@<Another Macro@>

Macros can be nested. The granularity of macros has nothing to do with
the programming language. In fact {\em funnelweb} has no idea of what
is inside a macro, so you could put a single line of code in a macro and
call this macro in another macro. Personally, I do not like that. The
smallest unit I put in a macro is a function. A function is a unit in
the sense that it defines a scope for local variables. I consider it
as bad style to have a local variable defined in one macro while using
it in another macro.

@$@<The famous alpha function@>==@{@-

void alpha(){
  Point p(0.0, 10.4), q(8.9, 6.8);
  Segment r, s(p,q);
}
@}

@B@<Production Files@>

A macro starting with `@@O' results in a {\em production file}. The
`O' stands for output. You can produce as many different production
files as you want. You can prefix the file name with a path, e.g., to
put header files in a {\tt include} directory. In this production
file we make use of the macros defined so far, by writing just their
name tags. In the production file you find them textually replaced.

@O@<funnelweb.C@>==@{@-

@<Header Files@>

@<typedefs@>

@<The famous alpha function@>

int main()
{
    alpha();

  cout << " done" << endl;

  return 1;
}
@}

@A@<Running Funnelweb@>

To produce code and documentation you type {\it fw +t funnelweb.fw}.
This results in several files:

\begin{description}
\item[funnelweb.lis:] This file is a kind of log file. Here you find
the error messages and warnings.

\item[funnelweb.tex:] This is a \LaTeX\ file.

\item[funnelweb.C, fw-font.el, fw.el:] These are the production files.
When you omit the option {\it +t} you will only get production files.
That is the usual thing to do when developing code.
\end{description}

A word to errors: The most common error is to have tabs in a document.
Remove them, not by hand, but go into {\it emacs}, type {\it Ctrl-x h},
{\it Esc-x untabify}. Another typical error is not to make use of a macro,
or to use a macro that is not defined.


@A@<About the .sty files@>

We define macros for the following mathematical symbols: \R\ ($\backslash$R),
\N\ ($\backslash$N), \Z\ ($\backslash$Z), \E\ ($\backslash$E).

There are symbols for \CC\ ($\backslash$CC), \gg\ ($\backslash$gg),
\leda\ ($\backslash$leda), \cgal\ ($\backslash$cgal).

There is a macro for the inclusion of ipe files: $\backslash$Ipe\{..\}.

\medskip
\centerline{\Ipe{drawing.ipe}}

\medskip


As {\sc Jpdraw} files contain \LaTeX\ code you simply include them using
the $\backslash$input command:

\begin{center}
\input{drawing.ltex}
\end{center}

Let us know which other useful macros you would like to have included.

@A@<Funnelweb and Emacs@>

If you use another editor than {\it emacs} then forget about this section.

@B@<Put this in your .emacs@>

The funnelweb mode is just a \CC -mode, which does not replace
blanks by tabs.   Adding a clause to the {\tt auto-mode-alist}
makes that you automatically are in funnelweb mode when you
charge a file with extension {\tt .fw}.

@O@<fw.el@>==@{@-
(defun fw-mode ()
  (c++-mode)
  (setq indent-tabs-mode nil))


(setq auto-mode-alist
      (append  '(("\\.fw$"  . fw-mode))
               auto-mode-alist)
)
@}

@B@<Font Lock@>

The following  code should go in a file setting up faces for
the {\tt fontlock} package. If you have no idea what this is all about,
please ask somebody who knows more about {\it emacs}.

@O@<fw-font.el@>==@{@-

 (make-face 'funnelweb-face)
 (set-face-foreground  'funnelweb-face "cadetblue")
 (copy-face 'funnelweb-face 'font-lock-keyword-face)


 (setq c++-font-lock-keywords
       (append c++-font-lock-keywords
               (list  '("@@<.*@@>" . funnelweb-face)
                      '("@@p.*@@>" . funnelweb-face)
                      '("@@." . funnelweb-face))))
@}

\end{document}
