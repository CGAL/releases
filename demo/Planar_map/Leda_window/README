Planar Map Package Demo Program
-------------------------------

  The directory contains a demo program (do "make demo" to compile)
and a utility program for generating input files for the demo program 
(do "make helputil" to compile).
  There is also a directory "input_files" which contains some input
files in the format needed for the demo program.

The demo program:
-----------------

  The demo program can be run with a file in the format defined below,
or it can be run without arguments in which case the user builds a planar
map interactively using the mouse. 
  The left button starts (resp. ends) a new segment at the position of
the mouse. The middle button will start (resp. end)  at the nearest existing 
vertex. The right button removes the segment directly above it.
Pressing "finish" will end the interactive reading of the planar map.

After the planar map is read (from the file or interactively) the user can use
the mouse for queries (ray shooting and point location).

usage: 
	demo [filename]  
 

The helputil program :
-------------------
The program handles input files for the demo program .
The Input file should be at the following format:
       <n = number of points>
       <x1> <y1> 
       ...
       <xn> <yn>
       <k = number of curves>
       <s1> <t1>
       ...
       <sk> <tk>
  Where xi, yi are the coordinates of point i and si,ti
are the indices (in the the above list of points) 
of the source and the target of curve i.

  The utilities given are creating a random file of (possibly
intersecting) segments, and splitting of segments in such a file into
a file of non-intersecting segments.
Do not run the demo on a randomly generated file without splitting
the segments via the 'i' parameter. The demo might crash or
disfunction.

Usages:

* The first parameter is always 'e' or 'f' indicates that 
  the input file is:
  'e' --- exact calculations (leda_rationals).
  'f' --- floating point (double).

1. Split line segments at intersection points:
   ****  helputil <e/f> i <input_file> <output_file>
                
2. Convert rationals file to doubles file (and vice versa)
   ****  helputil <e/f> c <input_file> <output_file>

3. Create random (not intersected) file with <num> segments
   ****  helputil <e/f> r <num> <output_file>







